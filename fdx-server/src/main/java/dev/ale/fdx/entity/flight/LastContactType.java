//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.4 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2019.10.28 at 02:58:02 PM ICT 
//


package dev.ale.fdx.entity.flight;

import java.util.Date;
import javax.persistence.Basic;
import javax.persistence.CascadeType;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;
import javax.persistence.Transient;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlAttribute;
import javax.xml.bind.annotation.XmlType;
import javax.xml.datatype.XMLGregorianCalendar;

import org.jvnet.hyperjaxb3.xml.bind.annotation.adapters.XMLGregorianCalendarAsDateTime;
import org.jvnet.hyperjaxb3.xml.bind.annotation.adapters.XmlAdapterUtils;
import org.jvnet.jaxb2_commons.lang.Equals;
import org.jvnet.jaxb2_commons.lang.EqualsStrategy;
import org.jvnet.jaxb2_commons.lang.HashCode;
import org.jvnet.jaxb2_commons.lang.HashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBEqualsStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBHashCodeStrategy;
import org.jvnet.jaxb2_commons.locator.ObjectLocator;
import org.jvnet.jaxb2_commons.locator.util.LocatorUtils;

import dev.ale.fdx.entity.base.ExtensibleType;
import dev.ale.fdx.entity.base.FrequencyType;


/**
 * 
 *             The last two-way contact between an ATS unit and the aircraft. [FIXM] 
 *          
 * 
 * <p>Java class for LastContactType complex type.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType name="LastContactType">
 *   &lt;complexContent>
 *     &lt;extension base="{http://www.fixm.aero/base/4.1}ExtensibleType">
 *       &lt;sequence>
 *         &lt;element name="lastContactFrequency" type="{http://www.fixm.aero/base/4.1}FrequencyType" minOccurs="0"/>
 *         &lt;element name="position" type="{http://www.fixm.aero/flight/4.1}LastPositionReportType" minOccurs="0"/>
 *       &lt;/sequence>
 *       &lt;attribute name="lastContactTime" type="{http://www.fixm.aero/base/4.1}TimeType" />
 *       &lt;attribute name="lastContactUnit" type="{http://www.fixm.aero/base/4.1}AtcUnitNameType" />
 *     &lt;/extension>
 *   &lt;/complexContent>
 * &lt;/complexType>
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "LastContactType", propOrder = {
    "lastContactFrequency",
    "position"
})
@Entity(name = "LastContactType")
@Table(name = "LASTCONTACTTYPE")
public class LastContactType
    extends ExtensibleType
    implements Equals, HashCode
{

    protected FrequencyType lastContactFrequency;
    protected LastPositionReportType position;
    @XmlAttribute(name = "lastContactTime")
    protected XMLGregorianCalendar lastContactTime;
    @XmlAttribute(name = "lastContactUnit")
    protected String lastContactUnit;

    /**
     * Gets the value of the lastContactFrequency property.
     * 
     * @return
     *     possible object is
     *     {@link FrequencyType }
     *     
     */
    @ManyToOne(targetEntity = FrequencyType.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "LASTCONTACTFREQUENCY_LASTCON_0")
    public FrequencyType getLastContactFrequency() {
        return lastContactFrequency;
    }

    /**
     * Sets the value of the lastContactFrequency property.
     * 
     * @param value
     *     allowed object is
     *     {@link FrequencyType }
     *     
     */
    public void setLastContactFrequency(FrequencyType value) {
        this.lastContactFrequency = value;
    }

    /**
     * Gets the value of the position property.
     * 
     * @return
     *     possible object is
     *     {@link LastPositionReportType }
     *     
     */
    @ManyToOne(targetEntity = LastPositionReportType.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "POSITION__LASTCONTACTTYPE_HJ_0")
    public LastPositionReportType getPosition() {
        return position;
    }

    /**
     * Sets the value of the position property.
     * 
     * @param value
     *     allowed object is
     *     {@link LastPositionReportType }
     *     
     */
    public void setPosition(LastPositionReportType value) {
        this.position = value;
    }

    /**
     * Gets the value of the lastContactTime property.
     * 
     * @return
     *     possible object is
     *     {@link XMLGregorianCalendar }
     *     
     */
    @Transient
    public XMLGregorianCalendar getLastContactTime() {
        return lastContactTime;
    }

    /**
     * Sets the value of the lastContactTime property.
     * 
     * @param value
     *     allowed object is
     *     {@link XMLGregorianCalendar }
     *     
     */
    public void setLastContactTime(XMLGregorianCalendar value) {
        this.lastContactTime = value;
    }

    /**
     * Gets the value of the lastContactUnit property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    @Basic
    @Column(name = "LASTCONTACTUNIT", length = 4096)
    public String getLastContactUnit() {
        return lastContactUnit;
    }

    /**
     * Sets the value of the lastContactUnit property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setLastContactUnit(String value) {
        this.lastContactUnit = value;
    }

    @Basic
    @Column(name = "LASTCONTACTTIMEITEM")
    @Temporal(TemporalType.TIMESTAMP)
    public Date getLastContactTimeItem() {
        return XmlAdapterUtils.unmarshall(XMLGregorianCalendarAsDateTime.class, this.getLastContactTime());
    }

    public void setLastContactTimeItem(Date target) {
        setLastContactTime(XmlAdapterUtils.marshall(XMLGregorianCalendarAsDateTime.class, target));
    }

    public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy strategy) {
        if (!(object instanceof LastContactType)) {
            return false;
        }
        if (this == object) {
            return true;
        }
        if (!super.equals(thisLocator, thatLocator, object, strategy)) {
            return false;
        }
        final LastContactType that = ((LastContactType) object);
        {
            FrequencyType lhsLastContactFrequency;
            lhsLastContactFrequency = this.getLastContactFrequency();
            FrequencyType rhsLastContactFrequency;
            rhsLastContactFrequency = that.getLastContactFrequency();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "lastContactFrequency", lhsLastContactFrequency), LocatorUtils.property(thatLocator, "lastContactFrequency", rhsLastContactFrequency), lhsLastContactFrequency, rhsLastContactFrequency)) {
                return false;
            }
        }
        {
            LastPositionReportType lhsPosition;
            lhsPosition = this.getPosition();
            LastPositionReportType rhsPosition;
            rhsPosition = that.getPosition();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "position", lhsPosition), LocatorUtils.property(thatLocator, "position", rhsPosition), lhsPosition, rhsPosition)) {
                return false;
            }
        }
        {
            XMLGregorianCalendar lhsLastContactTime;
            lhsLastContactTime = this.getLastContactTime();
            XMLGregorianCalendar rhsLastContactTime;
            rhsLastContactTime = that.getLastContactTime();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "lastContactTime", lhsLastContactTime), LocatorUtils.property(thatLocator, "lastContactTime", rhsLastContactTime), lhsLastContactTime, rhsLastContactTime)) {
                return false;
            }
        }
        {
            String lhsLastContactUnit;
            lhsLastContactUnit = this.getLastContactUnit();
            String rhsLastContactUnit;
            rhsLastContactUnit = that.getLastContactUnit();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "lastContactUnit", lhsLastContactUnit), LocatorUtils.property(thatLocator, "lastContactUnit", rhsLastContactUnit), lhsLastContactUnit, rhsLastContactUnit)) {
                return false;
            }
        }
        return true;
    }

    public boolean equals(Object object) {
        final EqualsStrategy strategy = JAXBEqualsStrategy.INSTANCE;
        return equals(null, null, object, strategy);
    }

    public int hashCode(ObjectLocator locator, HashCodeStrategy strategy) {
        int currentHashCode = super.hashCode(locator, strategy);
        {
            FrequencyType theLastContactFrequency;
            theLastContactFrequency = this.getLastContactFrequency();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "lastContactFrequency", theLastContactFrequency), currentHashCode, theLastContactFrequency);
        }
        {
            LastPositionReportType thePosition;
            thePosition = this.getPosition();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "position", thePosition), currentHashCode, thePosition);
        }
        {
            XMLGregorianCalendar theLastContactTime;
            theLastContactTime = this.getLastContactTime();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "lastContactTime", theLastContactTime), currentHashCode, theLastContactTime);
        }
        {
            String theLastContactUnit;
            theLastContactUnit = this.getLastContactUnit();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "lastContactUnit", theLastContactUnit), currentHashCode, theLastContactUnit);
        }
        return currentHashCode;
    }

    public int hashCode() {
        final HashCodeStrategy strategy = JAXBHashCodeStrategy.INSTANCE;
        return this.hashCode(null, strategy);
    }

}
