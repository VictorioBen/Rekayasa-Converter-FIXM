//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.4 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2019.10.28 at 02:58:02 PM ICT 
//


package dev.ale.fdx.entity.flight;

import javax.persistence.Basic;
import javax.persistence.CascadeType;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.EnumType;
import javax.persistence.Enumerated;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.Table;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlAttribute;
import javax.xml.bind.annotation.XmlType;

import org.jvnet.jaxb2_commons.lang.Equals;
import org.jvnet.jaxb2_commons.lang.EqualsStrategy;
import org.jvnet.jaxb2_commons.lang.HashCode;
import org.jvnet.jaxb2_commons.lang.HashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBEqualsStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBHashCodeStrategy;
import org.jvnet.jaxb2_commons.locator.ObjectLocator;
import org.jvnet.jaxb2_commons.locator.util.LocatorUtils;

import dev.ale.fdx.entity.base.FlightLevelOrAltitudeChoiceType;
import dev.ale.fdx.entity.base.TrueAirspeedType;


/**
 * 
 *             Describes the cruise climb parameters at the point at which a cruise climb is planned 
 *             to commence.  Includes the speed, the lower level and the upper level of the cruise 
 *             climb. 
 *          
 * 
 * <p>Java class for CruiseClimbStartType complex type.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType name="CruiseClimbStartType">
 *   &lt;complexContent>
 *     &lt;extension base="{http://www.fixm.aero/flight/4.1}AbstractRouteChangeType">
 *       &lt;sequence>
 *         &lt;element name="level" type="{http://www.fixm.aero/base/4.1}FlightLevelOrAltitudeChoiceType" minOccurs="0"/>
 *         &lt;element name="speed" type="{http://www.fixm.aero/base/4.1}TrueAirspeedType" minOccurs="0"/>
 *       &lt;/sequence>
 *       &lt;attribute name="atOrAboveAltitude" type="{http://www.fixm.aero/flight/4.1}AtOrAboveAltitudeIndicatorType" />
 *     &lt;/extension>
 *   &lt;/complexContent>
 * &lt;/complexType>
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "CruiseClimbStartType", propOrder = {
    "level",
    "speed"
})
@Entity(name = "CruiseClimbStartType")
@Table(name = "CRUISECLIMBSTARTTYPE")
public class CruiseClimbStartType
    extends AbstractRouteChangeType
    implements Equals, HashCode
{

    protected FlightLevelOrAltitudeChoiceType level;
    protected TrueAirspeedType speed;
    @XmlAttribute(name = "atOrAboveAltitude")
    protected AtOrAboveAltitudeIndicatorType atOrAboveAltitude;

    /**
     * Gets the value of the level property.
     * 
     * @return
     *     possible object is
     *     {@link FlightLevelOrAltitudeChoiceType }
     *     
     */
    @ManyToOne(targetEntity = FlightLevelOrAltitudeChoiceType.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "LEVEL__CRUISECLIMBSTARTTYPE__0")
    public FlightLevelOrAltitudeChoiceType getLevel() {
        return level;
    }

    /**
     * Sets the value of the level property.
     * 
     * @param value
     *     allowed object is
     *     {@link FlightLevelOrAltitudeChoiceType }
     *     
     */
    public void setLevel(FlightLevelOrAltitudeChoiceType value) {
        this.level = value;
    }

    /**
     * Gets the value of the speed property.
     * 
     * @return
     *     possible object is
     *     {@link TrueAirspeedType }
     *     
     */
    @ManyToOne(targetEntity = TrueAirspeedType.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "SPEED_CRUISECLIMBSTARTTYPE_H_0")
    public TrueAirspeedType getSpeed() {
        return speed;
    }

    /**
     * Sets the value of the speed property.
     * 
     * @param value
     *     allowed object is
     *     {@link TrueAirspeedType }
     *     
     */
    public void setSpeed(TrueAirspeedType value) {
        this.speed = value;
    }

    /**
     * Gets the value of the atOrAboveAltitude property.
     * 
     * @return
     *     possible object is
     *     {@link AtOrAboveAltitudeIndicatorType }
     *     
     */
    @Basic
    @Column(name = "ATORABOVEALTITUDE", length = 255)
    @Enumerated(EnumType.STRING)
    public AtOrAboveAltitudeIndicatorType getAtOrAboveAltitude() {
        return atOrAboveAltitude;
    }

    /**
     * Sets the value of the atOrAboveAltitude property.
     * 
     * @param value
     *     allowed object is
     *     {@link AtOrAboveAltitudeIndicatorType }
     *     
     */
    public void setAtOrAboveAltitude(AtOrAboveAltitudeIndicatorType value) {
        this.atOrAboveAltitude = value;
    }

    public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy strategy) {
        if (!(object instanceof CruiseClimbStartType)) {
            return false;
        }
        if (this == object) {
            return true;
        }
        if (!super.equals(thisLocator, thatLocator, object, strategy)) {
            return false;
        }
        final CruiseClimbStartType that = ((CruiseClimbStartType) object);
        {
            FlightLevelOrAltitudeChoiceType lhsLevel;
            lhsLevel = this.getLevel();
            FlightLevelOrAltitudeChoiceType rhsLevel;
            rhsLevel = that.getLevel();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "level", lhsLevel), LocatorUtils.property(thatLocator, "level", rhsLevel), lhsLevel, rhsLevel)) {
                return false;
            }
        }
        {
            TrueAirspeedType lhsSpeed;
            lhsSpeed = this.getSpeed();
            TrueAirspeedType rhsSpeed;
            rhsSpeed = that.getSpeed();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "speed", lhsSpeed), LocatorUtils.property(thatLocator, "speed", rhsSpeed), lhsSpeed, rhsSpeed)) {
                return false;
            }
        }
        {
            AtOrAboveAltitudeIndicatorType lhsAtOrAboveAltitude;
            lhsAtOrAboveAltitude = this.getAtOrAboveAltitude();
            AtOrAboveAltitudeIndicatorType rhsAtOrAboveAltitude;
            rhsAtOrAboveAltitude = that.getAtOrAboveAltitude();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "atOrAboveAltitude", lhsAtOrAboveAltitude), LocatorUtils.property(thatLocator, "atOrAboveAltitude", rhsAtOrAboveAltitude), lhsAtOrAboveAltitude, rhsAtOrAboveAltitude)) {
                return false;
            }
        }
        return true;
    }

    public boolean equals(Object object) {
        final EqualsStrategy strategy = JAXBEqualsStrategy.INSTANCE;
        return equals(null, null, object, strategy);
    }

    public int hashCode(ObjectLocator locator, HashCodeStrategy strategy) {
        int currentHashCode = super.hashCode(locator, strategy);
        {
            FlightLevelOrAltitudeChoiceType theLevel;
            theLevel = this.getLevel();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "level", theLevel), currentHashCode, theLevel);
        }
        {
            TrueAirspeedType theSpeed;
            theSpeed = this.getSpeed();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "speed", theSpeed), currentHashCode, theSpeed);
        }
        {
            AtOrAboveAltitudeIndicatorType theAtOrAboveAltitude;
            theAtOrAboveAltitude = this.getAtOrAboveAltitude();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "atOrAboveAltitude", theAtOrAboveAltitude), currentHashCode, theAtOrAboveAltitude);
        }
        return currentHashCode;
    }

    public int hashCode() {
        final HashCodeStrategy strategy = JAXBHashCodeStrategy.INSTANCE;
        return this.hashCode(null, strategy);
    }

}
