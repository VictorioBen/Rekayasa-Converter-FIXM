//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.4 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2019.10.28 at 02:58:02 PM ICT 
//


package dev.ale.fdx.entity.flight;

import java.math.BigDecimal;
import javax.persistence.Basic;
import javax.persistence.CascadeType;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.EnumType;
import javax.persistence.Enumerated;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.Table;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlAttribute;
import javax.xml.bind.annotation.XmlType;

import org.jvnet.jaxb2_commons.lang.Equals;
import org.jvnet.jaxb2_commons.lang.EqualsStrategy;
import org.jvnet.jaxb2_commons.lang.HashCode;
import org.jvnet.jaxb2_commons.lang.HashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBEqualsStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBHashCodeStrategy;
import org.jvnet.jaxb2_commons.locator.ObjectLocator;
import org.jvnet.jaxb2_commons.locator.util.LocatorUtils;

import dev.ale.fdx.entity.base.ExtensibleType;


/**
 * 
 *             The  grouping element for goods that contain radioactive materials. 
 *          
 * 
 * <p>Java class for RadioactiveMaterialType complex type.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType name="RadioactiveMaterialType">
 *   &lt;complexContent>
 *     &lt;extension base="{http://www.fixm.aero/base/4.1}ExtensibleType">
 *       &lt;sequence>
 *         &lt;element name="radionuclide" type="{http://www.fixm.aero/flight/4.1}RadionuclideType" minOccurs="0"/>
 *       &lt;/sequence>
 *       &lt;attribute name="category" type="{http://www.fixm.aero/flight/4.1}RadioactiveMaterialCategoryType" />
 *       &lt;attribute name="criticalitySafetyIndex">
 *         &lt;simpleType>
 *           &lt;restriction base="{http://www.fixm.aero/base/4.1}DecimalIndexType">
 *             &lt;maxInclusive value="100.0"/>
 *             &lt;minInclusive value="0.0"/>
 *           &lt;/restriction>
 *         &lt;/simpleType>
 *       &lt;/attribute>
 *       &lt;attribute name="fissileExceptedIndicator" type="{http://www.fixm.aero/flight/4.1}FissileExceptedType" />
 *       &lt;attribute name="transportIndex">
 *         &lt;simpleType>
 *           &lt;restriction base="{http://www.fixm.aero/base/4.1}DecimalIndexType">
 *             &lt;maxInclusive value="50.0"/>
 *             &lt;minInclusive value="0.0"/>
 *           &lt;/restriction>
 *         &lt;/simpleType>
 *       &lt;/attribute>
 *     &lt;/extension>
 *   &lt;/complexContent>
 * &lt;/complexType>
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "RadioactiveMaterialType", propOrder = {
    "radionuclide"
})
@Entity(name = "RadioactiveMaterialType")
@Table(name = "RADIOACTIVEMATERIALTYPE")
public class RadioactiveMaterialType
    extends ExtensibleType
    implements Equals, HashCode
{

    protected RadionuclideType radionuclide;
    @XmlAttribute(name = "category")
    protected RadioactiveMaterialCategoryType category;
    @XmlAttribute(name = "criticalitySafetyIndex")
    protected BigDecimal criticalitySafetyIndex;
    @XmlAttribute(name = "fissileExceptedIndicator")
    protected FissileExceptedType fissileExceptedIndicator;
    @XmlAttribute(name = "transportIndex")
    protected BigDecimal transportIndex;

    /**
     * Gets the value of the radionuclide property.
     * 
     * @return
     *     possible object is
     *     {@link RadionuclideType }
     *     
     */
    @ManyToOne(targetEntity = RadionuclideType.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "RADIONUCLIDE_RADIOACTIVEMATE_0")
    public RadionuclideType getRadionuclide() {
        return radionuclide;
    }

    /**
     * Sets the value of the radionuclide property.
     * 
     * @param value
     *     allowed object is
     *     {@link RadionuclideType }
     *     
     */
    public void setRadionuclide(RadionuclideType value) {
        this.radionuclide = value;
    }

    /**
     * Gets the value of the category property.
     * 
     * @return
     *     possible object is
     *     {@link RadioactiveMaterialCategoryType }
     *     
     */
    @Basic
    @Column(name = "CATEGORY", length = 255)
    @Enumerated(EnumType.STRING)
    public RadioactiveMaterialCategoryType getCategory() {
        return category;
    }

    /**
     * Sets the value of the category property.
     * 
     * @param value
     *     allowed object is
     *     {@link RadioactiveMaterialCategoryType }
     *     
     */
    public void setCategory(RadioactiveMaterialCategoryType value) {
        this.category = value;
    }

    /**
     * Gets the value of the criticalitySafetyIndex property.
     * 
     * @return
     *     possible object is
     *     {@link BigDecimal }
     *     
     */
    @Basic
    @Column(name = "CRITICALITYSAFETYINDEX", precision = 4, scale = 1)
    public BigDecimal getCriticalitySafetyIndex() {
        return criticalitySafetyIndex;
    }

    /**
     * Sets the value of the criticalitySafetyIndex property.
     * 
     * @param value
     *     allowed object is
     *     {@link BigDecimal }
     *     
     */
    public void setCriticalitySafetyIndex(BigDecimal value) {
        this.criticalitySafetyIndex = value;
    }

    /**
     * Gets the value of the fissileExceptedIndicator property.
     * 
     * @return
     *     possible object is
     *     {@link FissileExceptedType }
     *     
     */
    @Basic
    @Column(name = "FISSILEEXCEPTEDINDICATOR", length = 255)
    @Enumerated(EnumType.STRING)
    public FissileExceptedType getFissileExceptedIndicator() {
        return fissileExceptedIndicator;
    }

    /**
     * Sets the value of the fissileExceptedIndicator property.
     * 
     * @param value
     *     allowed object is
     *     {@link FissileExceptedType }
     *     
     */
    public void setFissileExceptedIndicator(FissileExceptedType value) {
        this.fissileExceptedIndicator = value;
    }

    /**
     * Gets the value of the transportIndex property.
     * 
     * @return
     *     possible object is
     *     {@link BigDecimal }
     *     
     */
    @Basic
    @Column(name = "TRANSPORTINDEX", precision = 4, scale = 1)
    public BigDecimal getTransportIndex() {
        return transportIndex;
    }

    /**
     * Sets the value of the transportIndex property.
     * 
     * @param value
     *     allowed object is
     *     {@link BigDecimal }
     *     
     */
    public void setTransportIndex(BigDecimal value) {
        this.transportIndex = value;
    }

    public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy strategy) {
        if (!(object instanceof RadioactiveMaterialType)) {
            return false;
        }
        if (this == object) {
            return true;
        }
        if (!super.equals(thisLocator, thatLocator, object, strategy)) {
            return false;
        }
        final RadioactiveMaterialType that = ((RadioactiveMaterialType) object);
        {
            RadionuclideType lhsRadionuclide;
            lhsRadionuclide = this.getRadionuclide();
            RadionuclideType rhsRadionuclide;
            rhsRadionuclide = that.getRadionuclide();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "radionuclide", lhsRadionuclide), LocatorUtils.property(thatLocator, "radionuclide", rhsRadionuclide), lhsRadionuclide, rhsRadionuclide)) {
                return false;
            }
        }
        {
            RadioactiveMaterialCategoryType lhsCategory;
            lhsCategory = this.getCategory();
            RadioactiveMaterialCategoryType rhsCategory;
            rhsCategory = that.getCategory();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "category", lhsCategory), LocatorUtils.property(thatLocator, "category", rhsCategory), lhsCategory, rhsCategory)) {
                return false;
            }
        }
        {
            BigDecimal lhsCriticalitySafetyIndex;
            lhsCriticalitySafetyIndex = this.getCriticalitySafetyIndex();
            BigDecimal rhsCriticalitySafetyIndex;
            rhsCriticalitySafetyIndex = that.getCriticalitySafetyIndex();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "criticalitySafetyIndex", lhsCriticalitySafetyIndex), LocatorUtils.property(thatLocator, "criticalitySafetyIndex", rhsCriticalitySafetyIndex), lhsCriticalitySafetyIndex, rhsCriticalitySafetyIndex)) {
                return false;
            }
        }
        {
            FissileExceptedType lhsFissileExceptedIndicator;
            lhsFissileExceptedIndicator = this.getFissileExceptedIndicator();
            FissileExceptedType rhsFissileExceptedIndicator;
            rhsFissileExceptedIndicator = that.getFissileExceptedIndicator();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "fissileExceptedIndicator", lhsFissileExceptedIndicator), LocatorUtils.property(thatLocator, "fissileExceptedIndicator", rhsFissileExceptedIndicator), lhsFissileExceptedIndicator, rhsFissileExceptedIndicator)) {
                return false;
            }
        }
        {
            BigDecimal lhsTransportIndex;
            lhsTransportIndex = this.getTransportIndex();
            BigDecimal rhsTransportIndex;
            rhsTransportIndex = that.getTransportIndex();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "transportIndex", lhsTransportIndex), LocatorUtils.property(thatLocator, "transportIndex", rhsTransportIndex), lhsTransportIndex, rhsTransportIndex)) {
                return false;
            }
        }
        return true;
    }

    public boolean equals(Object object) {
        final EqualsStrategy strategy = JAXBEqualsStrategy.INSTANCE;
        return equals(null, null, object, strategy);
    }

    public int hashCode(ObjectLocator locator, HashCodeStrategy strategy) {
        int currentHashCode = super.hashCode(locator, strategy);
        {
            RadionuclideType theRadionuclide;
            theRadionuclide = this.getRadionuclide();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "radionuclide", theRadionuclide), currentHashCode, theRadionuclide);
        }
        {
            RadioactiveMaterialCategoryType theCategory;
            theCategory = this.getCategory();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "category", theCategory), currentHashCode, theCategory);
        }
        {
            BigDecimal theCriticalitySafetyIndex;
            theCriticalitySafetyIndex = this.getCriticalitySafetyIndex();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "criticalitySafetyIndex", theCriticalitySafetyIndex), currentHashCode, theCriticalitySafetyIndex);
        }
        {
            FissileExceptedType theFissileExceptedIndicator;
            theFissileExceptedIndicator = this.getFissileExceptedIndicator();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "fissileExceptedIndicator", theFissileExceptedIndicator), currentHashCode, theFissileExceptedIndicator);
        }
        {
            BigDecimal theTransportIndex;
            theTransportIndex = this.getTransportIndex();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "transportIndex", theTransportIndex), currentHashCode, theTransportIndex);
        }
        return currentHashCode;
    }

    public int hashCode() {
        final HashCodeStrategy strategy = JAXBHashCodeStrategy.INSTANCE;
        return this.hashCode(null, strategy);
    }

}
