//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.4 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2019.10.28 at 02:58:02 PM ICT 
//


package dev.ale.fdx.entity.flight;

import javax.persistence.Basic;
import javax.persistence.CascadeType;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.Table;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlAttribute;
import javax.xml.bind.annotation.XmlType;

import org.jvnet.jaxb2_commons.lang.Equals;
import org.jvnet.jaxb2_commons.lang.EqualsStrategy;
import org.jvnet.jaxb2_commons.lang.HashCode;
import org.jvnet.jaxb2_commons.lang.HashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBEqualsStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBHashCodeStrategy;
import org.jvnet.jaxb2_commons.locator.ObjectLocator;
import org.jvnet.jaxb2_commons.locator.util.LocatorUtils;

import dev.ale.fdx.entity.base.ExtensibleType;


/**
 * 
 *             The type of aircraft enabling the flight. [FIXM] 
 *          
 * 
 * <p>Java class for AircraftTypeType complex type.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType name="AircraftTypeType">
 *   &lt;complexContent>
 *     &lt;extension base="{http://www.fixm.aero/base/4.1}ExtensibleType">
 *       &lt;sequence>
 *         &lt;element name="type" type="{http://www.fixm.aero/flight/4.1}AircraftTypeReferenceType" minOccurs="0"/>
 *       &lt;/sequence>
 *       &lt;attribute name="numberOfAircraft" type="{http://www.fixm.aero/base/4.1}CountType" />
 *     &lt;/extension>
 *   &lt;/complexContent>
 * &lt;/complexType>
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "AircraftTypeType", propOrder = {
    "type"
})
@Entity(name = "AircraftTypeType")
@Table(name = "AIRCRAFTTYPETYPE")
public class AircraftTypeType
    extends ExtensibleType
    implements Equals, HashCode
{

    protected AircraftTypeReferenceType type;
    @XmlAttribute(name = "numberOfAircraft")
    protected Integer numberOfAircraft;

    /**
     * Gets the value of the type property.
     * 
     * @return
     *     possible object is
     *     {@link AircraftTypeReferenceType }
     *     
     */
    @ManyToOne(targetEntity = AircraftTypeReferenceType.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "TYPE__AIRCRAFTTYPETYPE_HJID")
    public AircraftTypeReferenceType getType() {
        return type;
    }

    /**
     * Sets the value of the type property.
     * 
     * @param value
     *     allowed object is
     *     {@link AircraftTypeReferenceType }
     *     
     */
    public void setType(AircraftTypeReferenceType value) {
        this.type = value;
    }

    /**
     * Gets the value of the numberOfAircraft property.
     * 
     * @return
     *     possible object is
     *     {@link Integer }
     *     
     */
    @Basic
    @Column(name = "NUMBEROFAIRCRAFT", precision = 10, scale = 0)
    public Integer getNumberOfAircraft() {
        return numberOfAircraft;
    }

    /**
     * Sets the value of the numberOfAircraft property.
     * 
     * @param value
     *     allowed object is
     *     {@link Integer }
     *     
     */
    public void setNumberOfAircraft(Integer value) {
        this.numberOfAircraft = value;
    }

    public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy strategy) {
        if (!(object instanceof AircraftTypeType)) {
            return false;
        }
        if (this == object) {
            return true;
        }
        if (!super.equals(thisLocator, thatLocator, object, strategy)) {
            return false;
        }
        final AircraftTypeType that = ((AircraftTypeType) object);
        {
            AircraftTypeReferenceType lhsType;
            lhsType = this.getType();
            AircraftTypeReferenceType rhsType;
            rhsType = that.getType();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "type", lhsType), LocatorUtils.property(thatLocator, "type", rhsType), lhsType, rhsType)) {
                return false;
            }
        }
        {
            Integer lhsNumberOfAircraft;
            lhsNumberOfAircraft = this.getNumberOfAircraft();
            Integer rhsNumberOfAircraft;
            rhsNumberOfAircraft = that.getNumberOfAircraft();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "numberOfAircraft", lhsNumberOfAircraft), LocatorUtils.property(thatLocator, "numberOfAircraft", rhsNumberOfAircraft), lhsNumberOfAircraft, rhsNumberOfAircraft)) {
                return false;
            }
        }
        return true;
    }

    public boolean equals(Object object) {
        final EqualsStrategy strategy = JAXBEqualsStrategy.INSTANCE;
        return equals(null, null, object, strategy);
    }

    public int hashCode(ObjectLocator locator, HashCodeStrategy strategy) {
        int currentHashCode = super.hashCode(locator, strategy);
        {
            AircraftTypeReferenceType theType;
            theType = this.getType();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "type", theType), currentHashCode, theType);
        }
        {
            Integer theNumberOfAircraft;
            theNumberOfAircraft = this.getNumberOfAircraft();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "numberOfAircraft", theNumberOfAircraft), currentHashCode, theNumberOfAircraft);
        }
        return currentHashCode;
    }

    public int hashCode() {
        final HashCodeStrategy strategy = JAXBHashCodeStrategy.INSTANCE;
        return this.hashCode(null, strategy);
    }

}
