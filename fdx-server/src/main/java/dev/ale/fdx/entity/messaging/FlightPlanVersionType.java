//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.4 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2019.10.28 at 02:58:02 PM ICT 
//


package dev.ale.fdx.entity.messaging;

import javax.persistence.CascadeType;
import javax.persistence.Entity;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.Table;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlType;

import org.jvnet.jaxb2_commons.lang.Equals;
import org.jvnet.jaxb2_commons.lang.EqualsStrategy;
import org.jvnet.jaxb2_commons.lang.HashCode;
import org.jvnet.jaxb2_commons.lang.HashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBEqualsStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBHashCodeStrategy;
import org.jvnet.jaxb2_commons.locator.ObjectLocator;
import org.jvnet.jaxb2_commons.locator.util.LocatorUtils;

import dev.ale.fdx.entity.base.ExtensibleType;


/**
 * 
 *             The flight plan version shall indicate uniquely the latest version of a flight plan. 
 *             Two different kinds of version can exist for a given flight plan: one from the AU 
 *             and one from the ASP. [adapted from ICAO Draft FF-ICE Implementation Guidance] 
 *             
 * <pre>
 * &lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;deprecated xmlns="http://www.w3.org/2001/XMLSchema" xmlns:fb="http://www.fixm.aero/base/4.1" xmlns:fx="http://www.fixm.aero/flight/4.1" xmlns:mesg="http://www.fixm.aero/messaging/4.1" xmlns:xs="http://www.w3.org/2001/XMLSchema"&gt;&lt;deletionVersion&gt;Not specified yet&lt;/deletionVersion&gt;&lt;deprecationVersion&gt;4.1.0&lt;/deprecationVersion&gt;&lt;rationale&gt;CR 28&lt;/rationale&gt;&lt;replacement&gt;N/A. See the FIXM Implementation guidance for recommendations about messages.&lt;/replacement&gt;&lt;/deprecated&gt;
 * </pre>
 * 
 * 
 * <p>Java class for FlightPlanVersionType complex type.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType name="FlightPlanVersionType">
 *   &lt;complexContent>
 *     &lt;extension base="{http://www.fixm.aero/base/4.1}ExtensibleType">
 *       &lt;sequence>
 *         &lt;element name="referenceVersion" type="{http://www.fixm.aero/messaging/4.1}FlightPlanVersionTypeChoiceType" minOccurs="0"/>
 *         &lt;element name="version" type="{http://www.fixm.aero/messaging/4.1}FlightPlanVersionTypeChoiceType" minOccurs="0"/>
 *       &lt;/sequence>
 *     &lt;/extension>
 *   &lt;/complexContent>
 * &lt;/complexType>
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "FlightPlanVersionType", propOrder = {
    "referenceVersion",
    "version"
})
@Entity(name = "FlightPlanVersionType")
@Table(name = "FLIGHTPLANVERSIONTYPE")
public class FlightPlanVersionType
    extends ExtensibleType
    implements Equals, HashCode
{

    protected FlightPlanVersionTypeChoiceType referenceVersion;
    protected FlightPlanVersionTypeChoiceType version;

    /**
     * Gets the value of the referenceVersion property.
     * 
     * @return
     *     possible object is
     *     {@link FlightPlanVersionTypeChoiceType }
     *     
     */
    @ManyToOne(targetEntity = FlightPlanVersionTypeChoiceType.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "REFERENCEVERSION_FLIGHTPLANV_0")
    public FlightPlanVersionTypeChoiceType getReferenceVersion() {
        return referenceVersion;
    }

    /**
     * Sets the value of the referenceVersion property.
     * 
     * @param value
     *     allowed object is
     *     {@link FlightPlanVersionTypeChoiceType }
     *     
     */
    public void setReferenceVersion(FlightPlanVersionTypeChoiceType value) {
        this.referenceVersion = value;
    }

    /**
     * Gets the value of the version property.
     * 
     * @return
     *     possible object is
     *     {@link FlightPlanVersionTypeChoiceType }
     *     
     */
    @ManyToOne(targetEntity = FlightPlanVersionTypeChoiceType.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "VERSION__FLIGHTPLANVERSIONTY_0")
    public FlightPlanVersionTypeChoiceType getVersion() {
        return version;
    }

    /**
     * Sets the value of the version property.
     * 
     * @param value
     *     allowed object is
     *     {@link FlightPlanVersionTypeChoiceType }
     *     
     */
    public void setVersion(FlightPlanVersionTypeChoiceType value) {
        this.version = value;
    }

    public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy strategy) {
        if (!(object instanceof FlightPlanVersionType)) {
            return false;
        }
        if (this == object) {
            return true;
        }
        if (!super.equals(thisLocator, thatLocator, object, strategy)) {
            return false;
        }
        final FlightPlanVersionType that = ((FlightPlanVersionType) object);
        {
            FlightPlanVersionTypeChoiceType lhsReferenceVersion;
            lhsReferenceVersion = this.getReferenceVersion();
            FlightPlanVersionTypeChoiceType rhsReferenceVersion;
            rhsReferenceVersion = that.getReferenceVersion();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "referenceVersion", lhsReferenceVersion), LocatorUtils.property(thatLocator, "referenceVersion", rhsReferenceVersion), lhsReferenceVersion, rhsReferenceVersion)) {
                return false;
            }
        }
        {
            FlightPlanVersionTypeChoiceType lhsVersion;
            lhsVersion = this.getVersion();
            FlightPlanVersionTypeChoiceType rhsVersion;
            rhsVersion = that.getVersion();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "version", lhsVersion), LocatorUtils.property(thatLocator, "version", rhsVersion), lhsVersion, rhsVersion)) {
                return false;
            }
        }
        return true;
    }

    public boolean equals(Object object) {
        final EqualsStrategy strategy = JAXBEqualsStrategy.INSTANCE;
        return equals(null, null, object, strategy);
    }

    public int hashCode(ObjectLocator locator, HashCodeStrategy strategy) {
        int currentHashCode = super.hashCode(locator, strategy);
        {
            FlightPlanVersionTypeChoiceType theReferenceVersion;
            theReferenceVersion = this.getReferenceVersion();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "referenceVersion", theReferenceVersion), currentHashCode, theReferenceVersion);
        }
        {
            FlightPlanVersionTypeChoiceType theVersion;
            theVersion = this.getVersion();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "version", theVersion), currentHashCode, theVersion);
        }
        return currentHashCode;
    }

    public int hashCode() {
        final HashCodeStrategy strategy = JAXBHashCodeStrategy.INSTANCE;
        return this.hashCode(null, strategy);
    }

}
