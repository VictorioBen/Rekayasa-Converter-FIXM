//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.4 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2019.10.28 at 02:58:02 PM ICT 
//


package dev.ale.fdx.entity.flight;

import javax.persistence.CascadeType;
import javax.persistence.Entity;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.Table;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlType;

import org.jvnet.jaxb2_commons.lang.Equals;
import org.jvnet.jaxb2_commons.lang.EqualsStrategy;
import org.jvnet.jaxb2_commons.lang.HashCode;
import org.jvnet.jaxb2_commons.lang.HashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBEqualsStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBHashCodeStrategy;
import org.jvnet.jaxb2_commons.locator.ObjectLocator;
import org.jvnet.jaxb2_commons.locator.util.LocatorUtils;

import dev.ale.fdx.entity.base.ExtensibleType;
import dev.ale.fdx.entity.base.TemperatureType;
import dev.ale.fdx.entity.base.WindDirectionType;
import dev.ale.fdx.entity.base.WindSpeedType;


/**
 * 
 *             In a predicted trajectory, the instantaneous temperature and wind vector used at 
 *             the 4D Point for creating the 4D trajectory. 
 *          
 * 
 * <p>Java class for MeteorologicalDataType complex type.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType name="MeteorologicalDataType">
 *   &lt;complexContent>
 *     &lt;extension base="{http://www.fixm.aero/base/4.1}ExtensibleType">
 *       &lt;sequence>
 *         &lt;element name="temperature" type="{http://www.fixm.aero/base/4.1}TemperatureType" minOccurs="0"/>
 *         &lt;element name="windDirection" type="{http://www.fixm.aero/base/4.1}WindDirectionType" minOccurs="0"/>
 *         &lt;element name="windSpeed" type="{http://www.fixm.aero/base/4.1}WindSpeedType" minOccurs="0"/>
 *       &lt;/sequence>
 *     &lt;/extension>
 *   &lt;/complexContent>
 * &lt;/complexType>
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "MeteorologicalDataType", propOrder = {
    "temperature",
    "windDirection",
    "windSpeed"
})
@Entity(name = "MeteorologicalDataType")
@Table(name = "METEOROLOGICALDATATYPE")
public class MeteorologicalDataType
    extends ExtensibleType
    implements Equals, HashCode
{

    protected TemperatureType temperature;
    protected WindDirectionType windDirection;
    protected WindSpeedType windSpeed;

    /**
     * Gets the value of the temperature property.
     * 
     * @return
     *     possible object is
     *     {@link TemperatureType }
     *     
     */
    @ManyToOne(targetEntity = TemperatureType.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "TEMPERATURE_METEOROLOGICALDA_0")
    public TemperatureType getTemperature() {
        return temperature;
    }

    /**
     * Sets the value of the temperature property.
     * 
     * @param value
     *     allowed object is
     *     {@link TemperatureType }
     *     
     */
    public void setTemperature(TemperatureType value) {
        this.temperature = value;
    }

    /**
     * Gets the value of the windDirection property.
     * 
     * @return
     *     possible object is
     *     {@link WindDirectionType }
     *     
     */
    @ManyToOne(targetEntity = WindDirectionType.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "WINDDIRECTION_METEOROLOGICAL_0")
    public WindDirectionType getWindDirection() {
        return windDirection;
    }

    /**
     * Sets the value of the windDirection property.
     * 
     * @param value
     *     allowed object is
     *     {@link WindDirectionType }
     *     
     */
    public void setWindDirection(WindDirectionType value) {
        this.windDirection = value;
    }

    /**
     * Gets the value of the windSpeed property.
     * 
     * @return
     *     possible object is
     *     {@link WindSpeedType }
     *     
     */
    @ManyToOne(targetEntity = WindSpeedType.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "WINDSPEED_METEOROLOGICALDATA_0")
    public WindSpeedType getWindSpeed() {
        return windSpeed;
    }

    /**
     * Sets the value of the windSpeed property.
     * 
     * @param value
     *     allowed object is
     *     {@link WindSpeedType }
     *     
     */
    public void setWindSpeed(WindSpeedType value) {
        this.windSpeed = value;
    }

    public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy strategy) {
        if (!(object instanceof MeteorologicalDataType)) {
            return false;
        }
        if (this == object) {
            return true;
        }
        if (!super.equals(thisLocator, thatLocator, object, strategy)) {
            return false;
        }
        final MeteorologicalDataType that = ((MeteorologicalDataType) object);
        {
            TemperatureType lhsTemperature;
            lhsTemperature = this.getTemperature();
            TemperatureType rhsTemperature;
            rhsTemperature = that.getTemperature();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "temperature", lhsTemperature), LocatorUtils.property(thatLocator, "temperature", rhsTemperature), lhsTemperature, rhsTemperature)) {
                return false;
            }
        }
        {
            WindDirectionType lhsWindDirection;
            lhsWindDirection = this.getWindDirection();
            WindDirectionType rhsWindDirection;
            rhsWindDirection = that.getWindDirection();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "windDirection", lhsWindDirection), LocatorUtils.property(thatLocator, "windDirection", rhsWindDirection), lhsWindDirection, rhsWindDirection)) {
                return false;
            }
        }
        {
            WindSpeedType lhsWindSpeed;
            lhsWindSpeed = this.getWindSpeed();
            WindSpeedType rhsWindSpeed;
            rhsWindSpeed = that.getWindSpeed();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "windSpeed", lhsWindSpeed), LocatorUtils.property(thatLocator, "windSpeed", rhsWindSpeed), lhsWindSpeed, rhsWindSpeed)) {
                return false;
            }
        }
        return true;
    }

    public boolean equals(Object object) {
        final EqualsStrategy strategy = JAXBEqualsStrategy.INSTANCE;
        return equals(null, null, object, strategy);
    }

    public int hashCode(ObjectLocator locator, HashCodeStrategy strategy) {
        int currentHashCode = super.hashCode(locator, strategy);
        {
            TemperatureType theTemperature;
            theTemperature = this.getTemperature();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "temperature", theTemperature), currentHashCode, theTemperature);
        }
        {
            WindDirectionType theWindDirection;
            theWindDirection = this.getWindDirection();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "windDirection", theWindDirection), currentHashCode, theWindDirection);
        }
        {
            WindSpeedType theWindSpeed;
            theWindSpeed = this.getWindSpeed();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "windSpeed", theWindSpeed), currentHashCode, theWindSpeed);
        }
        return currentHashCode;
    }

    public int hashCode() {
        final HashCodeStrategy strategy = JAXBHashCodeStrategy.INSTANCE;
        return this.hashCode(null, strategy);
    }

}
