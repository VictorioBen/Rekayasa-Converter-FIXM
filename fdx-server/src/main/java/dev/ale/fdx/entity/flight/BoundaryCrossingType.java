//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.4 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2019.10.28 at 02:58:02 PM ICT 
//


package dev.ale.fdx.entity.flight;

import java.util.Date;
import javax.persistence.Basic;
import javax.persistence.CascadeType;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;
import javax.persistence.Transient;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlAttribute;
import javax.xml.bind.annotation.XmlType;
import javax.xml.datatype.XMLGregorianCalendar;

import org.jvnet.hyperjaxb3.xml.bind.annotation.adapters.XMLGregorianCalendarAsDateTime;
import org.jvnet.hyperjaxb3.xml.bind.annotation.adapters.XmlAdapterUtils;
import org.jvnet.jaxb2_commons.lang.Equals;
import org.jvnet.jaxb2_commons.lang.EqualsStrategy;
import org.jvnet.jaxb2_commons.lang.HashCode;
import org.jvnet.jaxb2_commons.lang.HashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBEqualsStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBHashCodeStrategy;
import org.jvnet.jaxb2_commons.locator.ObjectLocator;
import org.jvnet.jaxb2_commons.locator.util.LocatorUtils;

import dev.ale.fdx.entity.base.ExtensibleType;
import dev.ale.fdx.entity.base.FlightLevelOrAltitudeType;
import dev.ale.fdx.entity.base.SignificantPointType;


/**
 * 
 *             Boundary Crossing contains estimate data conveyed between ATS Units during the process 
 *             of Controller Coordination. [FIXM] 
 *          
 * 
 * <p>Java class for BoundaryCrossingType complex type.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType name="BoundaryCrossingType">
 *   &lt;complexContent>
 *     &lt;extension base="{http://www.fixm.aero/base/4.1}ExtensibleType">
 *       &lt;sequence>
 *         &lt;element name="altitudeInTransition" type="{http://www.fixm.aero/flight/4.1}AltitudeInTransitionType" minOccurs="0"/>
 *         &lt;element name="clearedLevel" type="{http://www.fixm.aero/base/4.1}FlightLevelOrAltitudeType" minOccurs="0"/>
 *         &lt;element name="crossingPoint" type="{http://www.fixm.aero/base/4.1}SignificantPointType" minOccurs="0"/>
 *       &lt;/sequence>
 *       &lt;attribute name="crossingTime" type="{http://www.fixm.aero/base/4.1}TimeType" />
 *     &lt;/extension>
 *   &lt;/complexContent>
 * &lt;/complexType>
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "BoundaryCrossingType", propOrder = {
    "altitudeInTransition",
    "clearedLevel",
    "crossingPoint"
})
@Entity(name = "BoundaryCrossingType")
@Table(name = "BOUNDARYCROSSINGTYPE")
public class BoundaryCrossingType
    extends ExtensibleType
    implements Equals, HashCode
{

    protected AltitudeInTransitionType altitudeInTransition;
    protected FlightLevelOrAltitudeType clearedLevel;
    protected SignificantPointType crossingPoint;
    @XmlAttribute(name = "crossingTime")
    protected XMLGregorianCalendar crossingTime;

    /**
     * Gets the value of the altitudeInTransition property.
     * 
     * @return
     *     possible object is
     *     {@link AltitudeInTransitionType }
     *     
     */
    @ManyToOne(targetEntity = AltitudeInTransitionType.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "ALTITUDEINTRANSITION_BOUNDAR_0")
    public AltitudeInTransitionType getAltitudeInTransition() {
        return altitudeInTransition;
    }

    /**
     * Sets the value of the altitudeInTransition property.
     * 
     * @param value
     *     allowed object is
     *     {@link AltitudeInTransitionType }
     *     
     */
    public void setAltitudeInTransition(AltitudeInTransitionType value) {
        this.altitudeInTransition = value;
    }

    /**
     * Gets the value of the clearedLevel property.
     * 
     * @return
     *     possible object is
     *     {@link FlightLevelOrAltitudeType }
     *     
     */
    @ManyToOne(targetEntity = FlightLevelOrAltitudeType.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "CLEAREDLEVEL_BOUNDARYCROSSIN_0")
    public FlightLevelOrAltitudeType getClearedLevel() {
        return clearedLevel;
    }

    /**
     * Sets the value of the clearedLevel property.
     * 
     * @param value
     *     allowed object is
     *     {@link FlightLevelOrAltitudeType }
     *     
     */
    public void setClearedLevel(FlightLevelOrAltitudeType value) {
        this.clearedLevel = value;
    }

    /**
     * Gets the value of the crossingPoint property.
     * 
     * @return
     *     possible object is
     *     {@link SignificantPointType }
     *     
     */
    @ManyToOne(targetEntity = SignificantPointType.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "CROSSINGPOINT_BOUNDARYCROSSI_0")
    public SignificantPointType getCrossingPoint() {
        return crossingPoint;
    }

    /**
     * Sets the value of the crossingPoint property.
     * 
     * @param value
     *     allowed object is
     *     {@link SignificantPointType }
     *     
     */
    public void setCrossingPoint(SignificantPointType value) {
        this.crossingPoint = value;
    }

    /**
     * Gets the value of the crossingTime property.
     * 
     * @return
     *     possible object is
     *     {@link XMLGregorianCalendar }
     *     
     */
    @Transient
    public XMLGregorianCalendar getCrossingTime() {
        return crossingTime;
    }

    /**
     * Sets the value of the crossingTime property.
     * 
     * @param value
     *     allowed object is
     *     {@link XMLGregorianCalendar }
     *     
     */
    public void setCrossingTime(XMLGregorianCalendar value) {
        this.crossingTime = value;
    }

    @Basic
    @Column(name = "CROSSINGTIMEITEM")
    @Temporal(TemporalType.TIMESTAMP)
    public Date getCrossingTimeItem() {
        return XmlAdapterUtils.unmarshall(XMLGregorianCalendarAsDateTime.class, this.getCrossingTime());
    }

    public void setCrossingTimeItem(Date target) {
        setCrossingTime(XmlAdapterUtils.marshall(XMLGregorianCalendarAsDateTime.class, target));
    }

    public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy strategy) {
        if (!(object instanceof BoundaryCrossingType)) {
            return false;
        }
        if (this == object) {
            return true;
        }
        if (!super.equals(thisLocator, thatLocator, object, strategy)) {
            return false;
        }
        final BoundaryCrossingType that = ((BoundaryCrossingType) object);
        {
            AltitudeInTransitionType lhsAltitudeInTransition;
            lhsAltitudeInTransition = this.getAltitudeInTransition();
            AltitudeInTransitionType rhsAltitudeInTransition;
            rhsAltitudeInTransition = that.getAltitudeInTransition();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "altitudeInTransition", lhsAltitudeInTransition), LocatorUtils.property(thatLocator, "altitudeInTransition", rhsAltitudeInTransition), lhsAltitudeInTransition, rhsAltitudeInTransition)) {
                return false;
            }
        }
        {
            FlightLevelOrAltitudeType lhsClearedLevel;
            lhsClearedLevel = this.getClearedLevel();
            FlightLevelOrAltitudeType rhsClearedLevel;
            rhsClearedLevel = that.getClearedLevel();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "clearedLevel", lhsClearedLevel), LocatorUtils.property(thatLocator, "clearedLevel", rhsClearedLevel), lhsClearedLevel, rhsClearedLevel)) {
                return false;
            }
        }
        {
            SignificantPointType lhsCrossingPoint;
            lhsCrossingPoint = this.getCrossingPoint();
            SignificantPointType rhsCrossingPoint;
            rhsCrossingPoint = that.getCrossingPoint();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "crossingPoint", lhsCrossingPoint), LocatorUtils.property(thatLocator, "crossingPoint", rhsCrossingPoint), lhsCrossingPoint, rhsCrossingPoint)) {
                return false;
            }
        }
        {
            XMLGregorianCalendar lhsCrossingTime;
            lhsCrossingTime = this.getCrossingTime();
            XMLGregorianCalendar rhsCrossingTime;
            rhsCrossingTime = that.getCrossingTime();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "crossingTime", lhsCrossingTime), LocatorUtils.property(thatLocator, "crossingTime", rhsCrossingTime), lhsCrossingTime, rhsCrossingTime)) {
                return false;
            }
        }
        return true;
    }

    public boolean equals(Object object) {
        final EqualsStrategy strategy = JAXBEqualsStrategy.INSTANCE;
        return equals(null, null, object, strategy);
    }

    public int hashCode(ObjectLocator locator, HashCodeStrategy strategy) {
        int currentHashCode = super.hashCode(locator, strategy);
        {
            AltitudeInTransitionType theAltitudeInTransition;
            theAltitudeInTransition = this.getAltitudeInTransition();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "altitudeInTransition", theAltitudeInTransition), currentHashCode, theAltitudeInTransition);
        }
        {
            FlightLevelOrAltitudeType theClearedLevel;
            theClearedLevel = this.getClearedLevel();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "clearedLevel", theClearedLevel), currentHashCode, theClearedLevel);
        }
        {
            SignificantPointType theCrossingPoint;
            theCrossingPoint = this.getCrossingPoint();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "crossingPoint", theCrossingPoint), currentHashCode, theCrossingPoint);
        }
        {
            XMLGregorianCalendar theCrossingTime;
            theCrossingTime = this.getCrossingTime();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "crossingTime", theCrossingTime), currentHashCode, theCrossingTime);
        }
        return currentHashCode;
    }

    public int hashCode() {
        final HashCodeStrategy strategy = JAXBHashCodeStrategy.INSTANCE;
        return this.hashCode(null, strategy);
    }

}
