//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.4 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2019.10.28 at 02:58:02 PM ICT 
//


package dev.ale.fdx.entity.base;

import javax.persistence.CascadeType;
import javax.persistence.Entity;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.Table;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlType;
import org.jvnet.jaxb2_commons.lang.Equals;
import org.jvnet.jaxb2_commons.lang.EqualsStrategy;
import org.jvnet.jaxb2_commons.lang.HashCode;
import org.jvnet.jaxb2_commons.lang.HashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBEqualsStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBHashCodeStrategy;
import org.jvnet.jaxb2_commons.locator.ObjectLocator;
import org.jvnet.jaxb2_commons.locator.util.LocatorUtils;


/**
 * 
 *             Bearing and distance from a reference point. [ICAO Doc 4444, Appendix 2, ITEM 15] 
 *             
 *             This FIXM class adds one optional property 'position' which may be used as a complement 
 *             to the bearing, distance and reference point information in order to provide the 
 *             computed position of the relative point, if available. 
 *          
 * 
 * <p>Java class for RelativePointType complex type.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType name="RelativePointType">
 *   &lt;complexContent>
 *     &lt;extension base="{http://www.fixm.aero/base/4.1}SignificantPointType">
 *       &lt;sequence>
 *         &lt;element name="bearing" type="{http://www.fixm.aero/base/4.1}BearingType" minOccurs="0"/>
 *         &lt;element name="distance" type="{http://www.fixm.aero/base/4.1}DistanceType" minOccurs="0"/>
 *         &lt;element name="position" type="{http://www.fixm.aero/base/4.1}GeographicalPositionType" minOccurs="0"/>
 *         &lt;element name="referencePoint" type="{http://www.fixm.aero/base/4.1}DesignatedPointOrNavaidType" minOccurs="0"/>
 *       &lt;/sequence>
 *     &lt;/extension>
 *   &lt;/complexContent>
 * &lt;/complexType>
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "RelativePointType", propOrder = {
    "bearing",
    "distance",
    "position",
    "referencePoint"
})
@Entity(name = "RelativePointType")
@Table(name = "RELATIVEPOINTTYPE")
public class RelativePointType
    extends SignificantPointType
    implements Equals, HashCode
{

    protected BearingType bearing;
    protected DistanceType distance;
    protected GeographicalPositionType position;
    protected DesignatedPointOrNavaidType referencePoint;

    /**
     * Gets the value of the bearing property.
     * 
     * @return
     *     possible object is
     *     {@link BearingType }
     *     
     */
    @ManyToOne(targetEntity = BearingType.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "BEARING_RELATIVEPOINTTYPE_HJ_0")
    public BearingType getBearing() {
        return bearing;
    }

    /**
     * Sets the value of the bearing property.
     * 
     * @param value
     *     allowed object is
     *     {@link BearingType }
     *     
     */
    public void setBearing(BearingType value) {
        this.bearing = value;
    }

    /**
     * Gets the value of the distance property.
     * 
     * @return
     *     possible object is
     *     {@link DistanceType }
     *     
     */
    @ManyToOne(targetEntity = DistanceType.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "DISTANCE_RELATIVEPOINTTYPE_H_0")
    public DistanceType getDistance() {
        return distance;
    }

    /**
     * Sets the value of the distance property.
     * 
     * @param value
     *     allowed object is
     *     {@link DistanceType }
     *     
     */
    public void setDistance(DistanceType value) {
        this.distance = value;
    }

    /**
     * Gets the value of the position property.
     * 
     * @return
     *     possible object is
     *     {@link GeographicalPositionType }
     *     
     */
    @ManyToOne(targetEntity = GeographicalPositionType.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "POSITION__RELATIVEPOINTTYPE__0")
    public GeographicalPositionType getPosition() {
        return position;
    }

    /**
     * Sets the value of the position property.
     * 
     * @param value
     *     allowed object is
     *     {@link GeographicalPositionType }
     *     
     */
    public void setPosition(GeographicalPositionType value) {
        this.position = value;
    }

    /**
     * Gets the value of the referencePoint property.
     * 
     * @return
     *     possible object is
     *     {@link DesignatedPointOrNavaidType }
     *     
     */
    @ManyToOne(targetEntity = DesignatedPointOrNavaidType.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "REFERENCEPOINT_RELATIVEPOINT_0")
    public DesignatedPointOrNavaidType getReferencePoint() {
        return referencePoint;
    }

    /**
     * Sets the value of the referencePoint property.
     * 
     * @param value
     *     allowed object is
     *     {@link DesignatedPointOrNavaidType }
     *     
     */
    public void setReferencePoint(DesignatedPointOrNavaidType value) {
        this.referencePoint = value;
    }

    public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy strategy) {
        if (!(object instanceof RelativePointType)) {
            return false;
        }
        if (this == object) {
            return true;
        }
        if (!super.equals(thisLocator, thatLocator, object, strategy)) {
            return false;
        }
        final RelativePointType that = ((RelativePointType) object);
        {
            BearingType lhsBearing;
            lhsBearing = this.getBearing();
            BearingType rhsBearing;
            rhsBearing = that.getBearing();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "bearing", lhsBearing), LocatorUtils.property(thatLocator, "bearing", rhsBearing), lhsBearing, rhsBearing)) {
                return false;
            }
        }
        {
            DistanceType lhsDistance;
            lhsDistance = this.getDistance();
            DistanceType rhsDistance;
            rhsDistance = that.getDistance();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "distance", lhsDistance), LocatorUtils.property(thatLocator, "distance", rhsDistance), lhsDistance, rhsDistance)) {
                return false;
            }
        }
        {
            GeographicalPositionType lhsPosition;
            lhsPosition = this.getPosition();
            GeographicalPositionType rhsPosition;
            rhsPosition = that.getPosition();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "position", lhsPosition), LocatorUtils.property(thatLocator, "position", rhsPosition), lhsPosition, rhsPosition)) {
                return false;
            }
        }
        {
            DesignatedPointOrNavaidType lhsReferencePoint;
            lhsReferencePoint = this.getReferencePoint();
            DesignatedPointOrNavaidType rhsReferencePoint;
            rhsReferencePoint = that.getReferencePoint();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "referencePoint", lhsReferencePoint), LocatorUtils.property(thatLocator, "referencePoint", rhsReferencePoint), lhsReferencePoint, rhsReferencePoint)) {
                return false;
            }
        }
        return true;
    }

    public boolean equals(Object object) {
        final EqualsStrategy strategy = JAXBEqualsStrategy.INSTANCE;
        return equals(null, null, object, strategy);
    }

    public int hashCode(ObjectLocator locator, HashCodeStrategy strategy) {
        int currentHashCode = super.hashCode(locator, strategy);
        {
            BearingType theBearing;
            theBearing = this.getBearing();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "bearing", theBearing), currentHashCode, theBearing);
        }
        {
            DistanceType theDistance;
            theDistance = this.getDistance();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "distance", theDistance), currentHashCode, theDistance);
        }
        {
            GeographicalPositionType thePosition;
            thePosition = this.getPosition();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "position", thePosition), currentHashCode, thePosition);
        }
        {
            DesignatedPointOrNavaidType theReferencePoint;
            theReferencePoint = this.getReferencePoint();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "referencePoint", theReferencePoint), currentHashCode, theReferencePoint);
        }
        return currentHashCode;
    }

    public int hashCode() {
        final HashCodeStrategy strategy = JAXBHashCodeStrategy.INSTANCE;
        return this.hashCode(null, strategy);
    }

}
