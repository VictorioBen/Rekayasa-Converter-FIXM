//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.4 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2019.10.28 at 02:58:02 PM ICT 
//


package dev.ale.fdx.entity.flight;

import java.util.ArrayList;
import java.util.List;
import javax.persistence.Basic;
import javax.persistence.CascadeType;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.Table;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlAttribute;
import javax.xml.bind.annotation.XmlType;

import org.hibernate.annotations.LazyCollection;
import org.hibernate.annotations.LazyCollectionOption;
import org.jvnet.jaxb2_commons.lang.Equals;
import org.jvnet.jaxb2_commons.lang.EqualsStrategy;
import org.jvnet.jaxb2_commons.lang.HashCode;
import org.jvnet.jaxb2_commons.lang.HashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBEqualsStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBHashCodeStrategy;
import org.jvnet.jaxb2_commons.locator.ObjectLocator;
import org.jvnet.jaxb2_commons.locator.util.LocatorUtils;

import dev.ale.fdx.entity.base.AerodromeReferenceType;
import dev.ale.fdx.entity.base.ExtensibleType;


/**
 * 
 *             Information about the planned destination of the flight. [FIXM] 
 *             
 * <pre>
 * &lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;deprecated xmlns="http://www.w3.org/2001/XMLSchema" xmlns:fb="http://www.fixm.aero/base/4.1" xmlns:fx="http://www.fixm.aero/flight/4.1" xmlns:xs="http://www.w3.org/2001/XMLSchema"&gt;&lt;deletionVersion&gt;5.0.0&lt;/deletionVersion&gt;&lt;deprecationVersion&gt;4.1.0&lt;/deprecationVersion&gt;&lt;rationale&gt;CR #11. Simplify Arrival and Destination modeling.&lt;/rationale&gt;&lt;replacement&gt;Fixm.Flight.Arrival.Arrival&lt;/replacement&gt;&lt;/deprecated&gt;
 * </pre>
 * 
 * 
 * <p>Java class for DestinationType complex type.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType name="DestinationType">
 *   &lt;complexContent>
 *     &lt;extension base="{http://www.fixm.aero/base/4.1}ExtensibleType">
 *       &lt;sequence>
 *         &lt;element name="aerodrome" type="{http://www.fixm.aero/base/4.1}AerodromeReferenceType" minOccurs="0"/>
 *         &lt;element name="aerodromeAlternate" type="{http://www.fixm.aero/base/4.1}AerodromeReferenceType" maxOccurs="2000" minOccurs="0"/>
 *         &lt;element name="reclearanceInFlight" type="{http://www.fixm.aero/flight/4.1}ReclearanceInFlightType" minOccurs="0"/>
 *       &lt;/sequence>
 *       &lt;attribute name="runwayDirection" type="{http://www.fixm.aero/base/4.1}RunwayDirectionDesignatorType" />
 *     &lt;/extension>
 *   &lt;/complexContent>
 * &lt;/complexType>
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "DestinationType", propOrder = {
    "aerodrome",
    "aerodromeAlternate",
    "reclearanceInFlight"
})
@Entity(name = "DestinationType")
@Table(name = "DESTINATIONTYPE")
public class DestinationType
    extends ExtensibleType
    implements Equals, HashCode
{

    protected AerodromeReferenceType aerodrome;
    protected List<AerodromeReferenceType> aerodromeAlternate;
    protected ReclearanceInFlightType reclearanceInFlight;
    @XmlAttribute(name = "runwayDirection")
    protected String runwayDirection;

    /**
     * Gets the value of the aerodrome property.
     * 
     * @return
     *     possible object is
     *     {@link AerodromeReferenceType }
     *     
     */
    @ManyToOne(targetEntity = AerodromeReferenceType.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "AERODROME_DESTINATIONTYPE_HJ_0")
    public AerodromeReferenceType getAerodrome() {
        return aerodrome;
    }

    /**
     * Sets the value of the aerodrome property.
     * 
     * @param value
     *     allowed object is
     *     {@link AerodromeReferenceType }
     *     
     */
    public void setAerodrome(AerodromeReferenceType value) {
        this.aerodrome = value;
    }

    /**
     * Gets the value of the aerodromeAlternate property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the aerodromeAlternate property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getAerodromeAlternate().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link AerodromeReferenceType }
     * 
     * 
     */
    @OneToMany(targetEntity = AerodromeReferenceType.class, cascade = {
            CascadeType.ALL
        }, fetch = FetchType.LAZY)
    @LazyCollection(LazyCollectionOption.FALSE)
    @JoinColumn(name = "AERODROMEALTERNATE_DESTINATI_0")
    public List<AerodromeReferenceType> getAerodromeAlternate() {
        if (aerodromeAlternate == null) {
            aerodromeAlternate = new ArrayList<AerodromeReferenceType>();
        }
        return this.aerodromeAlternate;
    }

    /**
     * 
     * 
     */
    public void setAerodromeAlternate(List<AerodromeReferenceType> aerodromeAlternate) {
        this.aerodromeAlternate = aerodromeAlternate;
    }

    /**
     * Gets the value of the reclearanceInFlight property.
     * 
     * @return
     *     possible object is
     *     {@link ReclearanceInFlightType }
     *     
     */
    @ManyToOne(targetEntity = ReclearanceInFlightType.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "RECLEARANCEINFLIGHT_DESTINAT_0")
    public ReclearanceInFlightType getReclearanceInFlight() {
        return reclearanceInFlight;
    }

    /**
     * Sets the value of the reclearanceInFlight property.
     * 
     * @param value
     *     allowed object is
     *     {@link ReclearanceInFlightType }
     *     
     */
    public void setReclearanceInFlight(ReclearanceInFlightType value) {
        this.reclearanceInFlight = value;
    }

    /**
     * Gets the value of the runwayDirection property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    @Basic
    @Column(name = "RUNWAYDIRECTION", length = 4096)
    public String getRunwayDirection() {
        return runwayDirection;
    }

    /**
     * Sets the value of the runwayDirection property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setRunwayDirection(String value) {
        this.runwayDirection = value;
    }

    public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy strategy) {
        if (!(object instanceof DestinationType)) {
            return false;
        }
        if (this == object) {
            return true;
        }
        if (!super.equals(thisLocator, thatLocator, object, strategy)) {
            return false;
        }
        final DestinationType that = ((DestinationType) object);
        {
            AerodromeReferenceType lhsAerodrome;
            lhsAerodrome = this.getAerodrome();
            AerodromeReferenceType rhsAerodrome;
            rhsAerodrome = that.getAerodrome();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "aerodrome", lhsAerodrome), LocatorUtils.property(thatLocator, "aerodrome", rhsAerodrome), lhsAerodrome, rhsAerodrome)) {
                return false;
            }
        }
        {
            List<AerodromeReferenceType> lhsAerodromeAlternate;
            lhsAerodromeAlternate = (((this.aerodromeAlternate!= null)&&(!this.aerodromeAlternate.isEmpty()))?this.getAerodromeAlternate():null);
            List<AerodromeReferenceType> rhsAerodromeAlternate;
            rhsAerodromeAlternate = (((that.aerodromeAlternate!= null)&&(!that.aerodromeAlternate.isEmpty()))?that.getAerodromeAlternate():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "aerodromeAlternate", lhsAerodromeAlternate), LocatorUtils.property(thatLocator, "aerodromeAlternate", rhsAerodromeAlternate), lhsAerodromeAlternate, rhsAerodromeAlternate)) {
                return false;
            }
        }
        {
            ReclearanceInFlightType lhsReclearanceInFlight;
            lhsReclearanceInFlight = this.getReclearanceInFlight();
            ReclearanceInFlightType rhsReclearanceInFlight;
            rhsReclearanceInFlight = that.getReclearanceInFlight();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "reclearanceInFlight", lhsReclearanceInFlight), LocatorUtils.property(thatLocator, "reclearanceInFlight", rhsReclearanceInFlight), lhsReclearanceInFlight, rhsReclearanceInFlight)) {
                return false;
            }
        }
        {
            String lhsRunwayDirection;
            lhsRunwayDirection = this.getRunwayDirection();
            String rhsRunwayDirection;
            rhsRunwayDirection = that.getRunwayDirection();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "runwayDirection", lhsRunwayDirection), LocatorUtils.property(thatLocator, "runwayDirection", rhsRunwayDirection), lhsRunwayDirection, rhsRunwayDirection)) {
                return false;
            }
        }
        return true;
    }

    public boolean equals(Object object) {
        final EqualsStrategy strategy = JAXBEqualsStrategy.INSTANCE;
        return equals(null, null, object, strategy);
    }

    public int hashCode(ObjectLocator locator, HashCodeStrategy strategy) {
        int currentHashCode = super.hashCode(locator, strategy);
        {
            AerodromeReferenceType theAerodrome;
            theAerodrome = this.getAerodrome();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "aerodrome", theAerodrome), currentHashCode, theAerodrome);
        }
        {
            List<AerodromeReferenceType> theAerodromeAlternate;
            theAerodromeAlternate = (((this.aerodromeAlternate!= null)&&(!this.aerodromeAlternate.isEmpty()))?this.getAerodromeAlternate():null);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "aerodromeAlternate", theAerodromeAlternate), currentHashCode, theAerodromeAlternate);
        }
        {
            ReclearanceInFlightType theReclearanceInFlight;
            theReclearanceInFlight = this.getReclearanceInFlight();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "reclearanceInFlight", theReclearanceInFlight), currentHashCode, theReclearanceInFlight);
        }
        {
            String theRunwayDirection;
            theRunwayDirection = this.getRunwayDirection();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "runwayDirection", theRunwayDirection), currentHashCode, theRunwayDirection);
        }
        return currentHashCode;
    }

    public int hashCode() {
        final HashCodeStrategy strategy = JAXBHashCodeStrategy.INSTANCE;
        return this.hashCode(null, strategy);
    }

}
