//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.4 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2019.10.28 at 02:58:02 PM ICT 
//


package dev.ale.fdx.entity.flight;

import javax.persistence.Basic;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.EnumType;
import javax.persistence.Enumerated;
import javax.persistence.Table;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlAttribute;
import javax.xml.bind.annotation.XmlSeeAlso;
import javax.xml.bind.annotation.XmlType;

import org.jvnet.jaxb2_commons.lang.Equals;
import org.jvnet.jaxb2_commons.lang.EqualsStrategy;
import org.jvnet.jaxb2_commons.lang.HashCode;
import org.jvnet.jaxb2_commons.lang.HashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBEqualsStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBHashCodeStrategy;
import org.jvnet.jaxb2_commons.locator.ObjectLocator;
import org.jvnet.jaxb2_commons.locator.util.LocatorUtils;

import dev.ale.fdx.entity.base.ExtensibleType;


/**
 * 
 *             An Abstract class that defines a constraint to an route point or trajectory. 
 *          
 * 
 * <p>Java class for AbstractConstraintType complex type.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType name="AbstractConstraintType">
 *   &lt;complexContent>
 *     &lt;extension base="{http://www.fixm.aero/base/4.1}ExtensibleType">
 *       &lt;attribute name="constraintReference" type="{http://www.fixm.aero/base/4.1}CharacterStringType" />
 *       &lt;attribute name="departureOrArrivalIndicator" type="{http://www.fixm.aero/flight/4.1}DepartureOrArrivalIndicatorType" />
 *       &lt;attribute name="seqNum">
 *         &lt;simpleType>
 *           &lt;restriction base="{http://www.w3.org/2001/XMLSchema}int">
 *             &lt;minInclusive value="0"/>
 *           &lt;/restriction>
 *         &lt;/simpleType>
 *       &lt;/attribute>
 *     &lt;/extension>
 *   &lt;/complexContent>
 * &lt;/complexType>
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "AbstractConstraintType")
@XmlSeeAlso({
    SpeedConstraintType.class,
    TimeConstraintType.class,
    LevelConstraintType.class
})
@Entity(name = "AbstractConstraintType")
@Table(name = "ABSTRACTCONSTRAINTTYPE")
public abstract class AbstractConstraintType
    extends ExtensibleType
    implements Equals, HashCode
{

    @XmlAttribute(name = "constraintReference")
    protected String constraintReference;
    @XmlAttribute(name = "departureOrArrivalIndicator")
    protected DepartureOrArrivalIndicatorType departureOrArrivalIndicator;
    @XmlAttribute(name = "seqNum")
    protected Integer seqNum;

    /**
     * Gets the value of the constraintReference property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    @Basic
    @Column(name = "CONSTRAINTREFERENCE", length = 4096)
    public String getConstraintReference() {
        return constraintReference;
    }

    /**
     * Sets the value of the constraintReference property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setConstraintReference(String value) {
        this.constraintReference = value;
    }

    /**
     * Gets the value of the departureOrArrivalIndicator property.
     * 
     * @return
     *     possible object is
     *     {@link DepartureOrArrivalIndicatorType }
     *     
     */
    @Basic
    @Column(name = "DEPARTUREORARRIVALINDICATOR", length = 255)
    @Enumerated(EnumType.STRING)
    public DepartureOrArrivalIndicatorType getDepartureOrArrivalIndicator() {
        return departureOrArrivalIndicator;
    }

    /**
     * Sets the value of the departureOrArrivalIndicator property.
     * 
     * @param value
     *     allowed object is
     *     {@link DepartureOrArrivalIndicatorType }
     *     
     */
    public void setDepartureOrArrivalIndicator(DepartureOrArrivalIndicatorType value) {
        this.departureOrArrivalIndicator = value;
    }

    /**
     * Gets the value of the seqNum property.
     * 
     * @return
     *     possible object is
     *     {@link Integer }
     *     
     */
    @Basic
    @Column(name = "SEQNUM", scale = 0)
    public Integer getSeqNum() {
        return seqNum;
    }

    /**
     * Sets the value of the seqNum property.
     * 
     * @param value
     *     allowed object is
     *     {@link Integer }
     *     
     */
    public void setSeqNum(Integer value) {
        this.seqNum = value;
    }

    public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy strategy) {
        if (!(object instanceof AbstractConstraintType)) {
            return false;
        }
        if (this == object) {
            return true;
        }
        if (!super.equals(thisLocator, thatLocator, object, strategy)) {
            return false;
        }
        final AbstractConstraintType that = ((AbstractConstraintType) object);
        {
            String lhsConstraintReference;
            lhsConstraintReference = this.getConstraintReference();
            String rhsConstraintReference;
            rhsConstraintReference = that.getConstraintReference();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "constraintReference", lhsConstraintReference), LocatorUtils.property(thatLocator, "constraintReference", rhsConstraintReference), lhsConstraintReference, rhsConstraintReference)) {
                return false;
            }
        }
        {
            DepartureOrArrivalIndicatorType lhsDepartureOrArrivalIndicator;
            lhsDepartureOrArrivalIndicator = this.getDepartureOrArrivalIndicator();
            DepartureOrArrivalIndicatorType rhsDepartureOrArrivalIndicator;
            rhsDepartureOrArrivalIndicator = that.getDepartureOrArrivalIndicator();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "departureOrArrivalIndicator", lhsDepartureOrArrivalIndicator), LocatorUtils.property(thatLocator, "departureOrArrivalIndicator", rhsDepartureOrArrivalIndicator), lhsDepartureOrArrivalIndicator, rhsDepartureOrArrivalIndicator)) {
                return false;
            }
        }
        {
            Integer lhsSeqNum;
            lhsSeqNum = this.getSeqNum();
            Integer rhsSeqNum;
            rhsSeqNum = that.getSeqNum();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "seqNum", lhsSeqNum), LocatorUtils.property(thatLocator, "seqNum", rhsSeqNum), lhsSeqNum, rhsSeqNum)) {
                return false;
            }
        }
        return true;
    }

    public boolean equals(Object object) {
        final EqualsStrategy strategy = JAXBEqualsStrategy.INSTANCE;
        return equals(null, null, object, strategy);
    }

    public int hashCode(ObjectLocator locator, HashCodeStrategy strategy) {
        int currentHashCode = super.hashCode(locator, strategy);
        {
            String theConstraintReference;
            theConstraintReference = this.getConstraintReference();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "constraintReference", theConstraintReference), currentHashCode, theConstraintReference);
        }
        {
            DepartureOrArrivalIndicatorType theDepartureOrArrivalIndicator;
            theDepartureOrArrivalIndicator = this.getDepartureOrArrivalIndicator();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "departureOrArrivalIndicator", theDepartureOrArrivalIndicator), currentHashCode, theDepartureOrArrivalIndicator);
        }
        {
            Integer theSeqNum;
            theSeqNum = this.getSeqNum();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "seqNum", theSeqNum), currentHashCode, theSeqNum);
        }
        return currentHashCode;
    }

    public int hashCode() {
        final HashCodeStrategy strategy = JAXBHashCodeStrategy.INSTANCE;
        return this.hashCode(null, strategy);
    }

}
