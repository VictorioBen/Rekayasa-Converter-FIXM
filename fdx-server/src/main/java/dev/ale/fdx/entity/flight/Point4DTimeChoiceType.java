//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.4 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2019.10.28 at 02:58:02 PM ICT 
//


package dev.ale.fdx.entity.flight;

import java.util.Date;
import javax.persistence.Basic;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;
import javax.persistence.Transient;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlType;
import javax.xml.datatype.Duration;
import javax.xml.datatype.XMLGregorianCalendar;

import org.jvnet.hyperjaxb3.xml.bind.annotation.adapters.DurationAsString;
import org.jvnet.hyperjaxb3.xml.bind.annotation.adapters.XMLGregorianCalendarAsDateTime;
import org.jvnet.hyperjaxb3.xml.bind.annotation.adapters.XmlAdapterUtils;
import org.jvnet.jaxb2_commons.lang.Equals;
import org.jvnet.jaxb2_commons.lang.EqualsStrategy;
import org.jvnet.jaxb2_commons.lang.HashCode;
import org.jvnet.jaxb2_commons.lang.HashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBEqualsStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBHashCodeStrategy;
import org.jvnet.jaxb2_commons.locator.ObjectLocator;
import org.jvnet.jaxb2_commons.locator.util.LocatorUtils;

import dev.ale.fdx.entity.base.ExtensibleType;


/**
 * 
 *             Allows to either specify a 4D point time as either an absolute time or relative time. 
 *             
 *          
 * 
 * <p>Java class for Point4DTimeChoiceType complex type.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType name="Point4DTimeChoiceType">
 *   &lt;complexContent>
 *     &lt;extension base="{http://www.fixm.aero/base/4.1}ExtensibleType">
 *       &lt;choice>
 *         &lt;element name="absoluteTime" type="{http://www.fixm.aero/base/4.1}TimeType" minOccurs="0"/>
 *         &lt;element name="relativeTimeFromInitialPredictionPoint" type="{http://www.fixm.aero/base/4.1}DurationType" minOccurs="0"/>
 *       &lt;/choice>
 *     &lt;/extension>
 *   &lt;/complexContent>
 * &lt;/complexType>
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "Point4DTimeChoiceType", propOrder = {
    "absoluteTime",
    "relativeTimeFromInitialPredictionPoint"
})
@Entity(name = "Point4DTimeChoiceType")
@Table(name = "POINT4DTIMECHOICETYPE")
public class Point4DTimeChoiceType
    extends ExtensibleType
    implements Equals, HashCode
{

    protected XMLGregorianCalendar absoluteTime;
    protected Duration relativeTimeFromInitialPredictionPoint;

    /**
     * Gets the value of the absoluteTime property.
     * 
     * @return
     *     possible object is
     *     {@link XMLGregorianCalendar }
     *     
     */
    @Transient
    public XMLGregorianCalendar getAbsoluteTime() {
        return absoluteTime;
    }

    /**
     * Sets the value of the absoluteTime property.
     * 
     * @param value
     *     allowed object is
     *     {@link XMLGregorianCalendar }
     *     
     */
    public void setAbsoluteTime(XMLGregorianCalendar value) {
        this.absoluteTime = value;
    }

    /**
     * Gets the value of the relativeTimeFromInitialPredictionPoint property.
     * 
     * @return
     *     possible object is
     *     {@link Duration }
     *     
     */
    @Transient
    public Duration getRelativeTimeFromInitialPredictionPoint() {
        return relativeTimeFromInitialPredictionPoint;
    }

    /**
     * Sets the value of the relativeTimeFromInitialPredictionPoint property.
     * 
     * @param value
     *     allowed object is
     *     {@link Duration }
     *     
     */
    public void setRelativeTimeFromInitialPredictionPoint(Duration value) {
        this.relativeTimeFromInitialPredictionPoint = value;
    }

    @Basic
    @Column(name = "ABSOLUTETIMEITEM")
    @Temporal(TemporalType.TIMESTAMP)
    public Date getAbsoluteTimeItem() {
        return XmlAdapterUtils.unmarshall(XMLGregorianCalendarAsDateTime.class, this.getAbsoluteTime());
    }

    public void setAbsoluteTimeItem(Date target) {
        setAbsoluteTime(XmlAdapterUtils.marshall(XMLGregorianCalendarAsDateTime.class, target));
    }

    @Basic
    @Column(name = "RELATIVETIMEFROMINITIALPREDI_0", length = 127)
    public String getRelativeTimeFromInitialPredictionPointItem() {
        return XmlAdapterUtils.unmarshall(DurationAsString.class, this.getRelativeTimeFromInitialPredictionPoint());
    }

    public void setRelativeTimeFromInitialPredictionPointItem(String target) {
        setRelativeTimeFromInitialPredictionPoint(XmlAdapterUtils.marshall(DurationAsString.class, target));
    }

    public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy strategy) {
        if (!(object instanceof Point4DTimeChoiceType)) {
            return false;
        }
        if (this == object) {
            return true;
        }
        if (!super.equals(thisLocator, thatLocator, object, strategy)) {
            return false;
        }
        final Point4DTimeChoiceType that = ((Point4DTimeChoiceType) object);
        {
            XMLGregorianCalendar lhsAbsoluteTime;
            lhsAbsoluteTime = this.getAbsoluteTime();
            XMLGregorianCalendar rhsAbsoluteTime;
            rhsAbsoluteTime = that.getAbsoluteTime();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "absoluteTime", lhsAbsoluteTime), LocatorUtils.property(thatLocator, "absoluteTime", rhsAbsoluteTime), lhsAbsoluteTime, rhsAbsoluteTime)) {
                return false;
            }
        }
        {
            Duration lhsRelativeTimeFromInitialPredictionPoint;
            lhsRelativeTimeFromInitialPredictionPoint = this.getRelativeTimeFromInitialPredictionPoint();
            Duration rhsRelativeTimeFromInitialPredictionPoint;
            rhsRelativeTimeFromInitialPredictionPoint = that.getRelativeTimeFromInitialPredictionPoint();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "relativeTimeFromInitialPredictionPoint", lhsRelativeTimeFromInitialPredictionPoint), LocatorUtils.property(thatLocator, "relativeTimeFromInitialPredictionPoint", rhsRelativeTimeFromInitialPredictionPoint), lhsRelativeTimeFromInitialPredictionPoint, rhsRelativeTimeFromInitialPredictionPoint)) {
                return false;
            }
        }
        return true;
    }

    public boolean equals(Object object) {
        final EqualsStrategy strategy = JAXBEqualsStrategy.INSTANCE;
        return equals(null, null, object, strategy);
    }

    public int hashCode(ObjectLocator locator, HashCodeStrategy strategy) {
        int currentHashCode = super.hashCode(locator, strategy);
        {
            XMLGregorianCalendar theAbsoluteTime;
            theAbsoluteTime = this.getAbsoluteTime();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "absoluteTime", theAbsoluteTime), currentHashCode, theAbsoluteTime);
        }
        {
            Duration theRelativeTimeFromInitialPredictionPoint;
            theRelativeTimeFromInitialPredictionPoint = this.getRelativeTimeFromInitialPredictionPoint();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "relativeTimeFromInitialPredictionPoint", theRelativeTimeFromInitialPredictionPoint), currentHashCode, theRelativeTimeFromInitialPredictionPoint);
        }
        return currentHashCode;
    }

    public int hashCode() {
        final HashCodeStrategy strategy = JAXBHashCodeStrategy.INSTANCE;
        return this.hashCode(null, strategy);
    }

}
