//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.4 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2019.10.28 at 02:58:02 PM ICT 
//


package dev.ale.fdx.entity.flight;

import java.util.ArrayList;
import java.util.List;
import javax.persistence.Basic;
import javax.persistence.CascadeType;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.Table;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlAttribute;
import javax.xml.bind.annotation.XmlType;

import org.hibernate.annotations.LazyCollection;
import org.hibernate.annotations.LazyCollectionOption;
import org.jvnet.jaxb2_commons.lang.Equals;
import org.jvnet.jaxb2_commons.lang.EqualsStrategy;
import org.jvnet.jaxb2_commons.lang.HashCode;
import org.jvnet.jaxb2_commons.lang.HashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBEqualsStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBHashCodeStrategy;
import org.jvnet.jaxb2_commons.locator.ObjectLocator;
import org.jvnet.jaxb2_commons.locator.util.LocatorUtils;

import dev.ale.fdx.entity.base.AerodromeReferenceType;
import dev.ale.fdx.entity.base.ExtensibleType;
import dev.ale.fdx.entity.base.SsrCodeType;


/**
 * 
 *             Groups the en route information about the flight. 
 *          
 * 
 * <p>Java class for EnRouteType complex type.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType name="EnRouteType">
 *   &lt;complexContent>
 *     &lt;extension base="{http://www.fixm.aero/base/4.1}ExtensibleType">
 *       &lt;sequence>
 *         &lt;element name="alternateAerodrome" type="{http://www.fixm.aero/base/4.1}AerodromeReferenceType" maxOccurs="2000" minOccurs="0"/>
 *         &lt;element name="boundaryCrossingCoordination" type="{http://www.fixm.aero/flight/4.1}BoundaryCrossingType" minOccurs="0"/>
 *         &lt;element name="currentSsrCode" type="{http://www.fixm.aero/base/4.1}SsrCodeType" minOccurs="0"/>
 *       &lt;/sequence>
 *       &lt;attribute name="currentModeACode" type="{http://www.fixm.aero/base/4.1}ModeACodeType" />
 *     &lt;/extension>
 *   &lt;/complexContent>
 * &lt;/complexType>
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "EnRouteType", propOrder = {
    "alternateAerodrome",
    "boundaryCrossingCoordination",
    "currentSsrCode"
})
@Entity(name = "EnRouteType")
@Table(name = "ENROUTETYPE")
public class EnRouteType
    extends ExtensibleType
    implements Equals, HashCode
{

    protected List<AerodromeReferenceType> alternateAerodrome;
    protected BoundaryCrossingType boundaryCrossingCoordination;
    protected SsrCodeType currentSsrCode;
    @XmlAttribute(name = "currentModeACode")
    protected String currentModeACode;

    /**
     * Gets the value of the alternateAerodrome property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the alternateAerodrome property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getAlternateAerodrome().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link AerodromeReferenceType }
     * 
     * 
     */
    @OneToMany(targetEntity = AerodromeReferenceType.class, cascade = {
        CascadeType.ALL
    },fetch = FetchType.LAZY)
    @LazyCollection(LazyCollectionOption.FALSE)
    @JoinColumn(name = "ALTERNATEAERODROME_ENROUTETY_0")
    public List<AerodromeReferenceType> getAlternateAerodrome() {
        if (alternateAerodrome == null) {
            alternateAerodrome = new ArrayList<AerodromeReferenceType>();
        }
        return this.alternateAerodrome;
    }

    /**
     * 
     * 
     */
    public void setAlternateAerodrome(List<AerodromeReferenceType> alternateAerodrome) {
        this.alternateAerodrome = alternateAerodrome;
    }

    /**
     * Gets the value of the boundaryCrossingCoordination property.
     * 
     * @return
     *     possible object is
     *     {@link BoundaryCrossingType }
     *     
     */
    @ManyToOne(targetEntity = BoundaryCrossingType.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "BOUNDARYCROSSINGCOORDINATION_0")
    public BoundaryCrossingType getBoundaryCrossingCoordination() {
        return boundaryCrossingCoordination;
    }

    /**
     * Sets the value of the boundaryCrossingCoordination property.
     * 
     * @param value
     *     allowed object is
     *     {@link BoundaryCrossingType }
     *     
     */
    public void setBoundaryCrossingCoordination(BoundaryCrossingType value) {
        this.boundaryCrossingCoordination = value;
    }

    /**
     * Gets the value of the currentSsrCode property.
     * 
     * @return
     *     possible object is
     *     {@link SsrCodeType }
     *     
     */
    @ManyToOne(targetEntity = SsrCodeType.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "CURRENTSSRCODE_ENROUTETYPE_H_0")
    public SsrCodeType getCurrentSsrCode() {
        return currentSsrCode;
    }

    /**
     * Sets the value of the currentSsrCode property.
     * 
     * @param value
     *     allowed object is
     *     {@link SsrCodeType }
     *     
     */
    public void setCurrentSsrCode(SsrCodeType value) {
        this.currentSsrCode = value;
    }

    /**
     * Gets the value of the currentModeACode property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    @Basic
    @Column(name = "CURRENTMODEACODE", length = 4096)
    public String getCurrentModeACode() {
        return currentModeACode;
    }

    /**
     * Sets the value of the currentModeACode property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setCurrentModeACode(String value) {
        this.currentModeACode = value;
    }

    public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy strategy) {
        if (!(object instanceof EnRouteType)) {
            return false;
        }
        if (this == object) {
            return true;
        }
        if (!super.equals(thisLocator, thatLocator, object, strategy)) {
            return false;
        }
        final EnRouteType that = ((EnRouteType) object);
        {
            List<AerodromeReferenceType> lhsAlternateAerodrome;
            lhsAlternateAerodrome = (((this.alternateAerodrome!= null)&&(!this.alternateAerodrome.isEmpty()))?this.getAlternateAerodrome():null);
            List<AerodromeReferenceType> rhsAlternateAerodrome;
            rhsAlternateAerodrome = (((that.alternateAerodrome!= null)&&(!that.alternateAerodrome.isEmpty()))?that.getAlternateAerodrome():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "alternateAerodrome", lhsAlternateAerodrome), LocatorUtils.property(thatLocator, "alternateAerodrome", rhsAlternateAerodrome), lhsAlternateAerodrome, rhsAlternateAerodrome)) {
                return false;
            }
        }
        {
            BoundaryCrossingType lhsBoundaryCrossingCoordination;
            lhsBoundaryCrossingCoordination = this.getBoundaryCrossingCoordination();
            BoundaryCrossingType rhsBoundaryCrossingCoordination;
            rhsBoundaryCrossingCoordination = that.getBoundaryCrossingCoordination();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "boundaryCrossingCoordination", lhsBoundaryCrossingCoordination), LocatorUtils.property(thatLocator, "boundaryCrossingCoordination", rhsBoundaryCrossingCoordination), lhsBoundaryCrossingCoordination, rhsBoundaryCrossingCoordination)) {
                return false;
            }
        }
        {
            SsrCodeType lhsCurrentSsrCode;
            lhsCurrentSsrCode = this.getCurrentSsrCode();
            SsrCodeType rhsCurrentSsrCode;
            rhsCurrentSsrCode = that.getCurrentSsrCode();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "currentSsrCode", lhsCurrentSsrCode), LocatorUtils.property(thatLocator, "currentSsrCode", rhsCurrentSsrCode), lhsCurrentSsrCode, rhsCurrentSsrCode)) {
                return false;
            }
        }
        {
            String lhsCurrentModeACode;
            lhsCurrentModeACode = this.getCurrentModeACode();
            String rhsCurrentModeACode;
            rhsCurrentModeACode = that.getCurrentModeACode();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "currentModeACode", lhsCurrentModeACode), LocatorUtils.property(thatLocator, "currentModeACode", rhsCurrentModeACode), lhsCurrentModeACode, rhsCurrentModeACode)) {
                return false;
            }
        }
        return true;
    }

    public boolean equals(Object object) {
        final EqualsStrategy strategy = JAXBEqualsStrategy.INSTANCE;
        return equals(null, null, object, strategy);
    }

    public int hashCode(ObjectLocator locator, HashCodeStrategy strategy) {
        int currentHashCode = super.hashCode(locator, strategy);
        {
            List<AerodromeReferenceType> theAlternateAerodrome;
            theAlternateAerodrome = (((this.alternateAerodrome!= null)&&(!this.alternateAerodrome.isEmpty()))?this.getAlternateAerodrome():null);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "alternateAerodrome", theAlternateAerodrome), currentHashCode, theAlternateAerodrome);
        }
        {
            BoundaryCrossingType theBoundaryCrossingCoordination;
            theBoundaryCrossingCoordination = this.getBoundaryCrossingCoordination();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "boundaryCrossingCoordination", theBoundaryCrossingCoordination), currentHashCode, theBoundaryCrossingCoordination);
        }
        {
            SsrCodeType theCurrentSsrCode;
            theCurrentSsrCode = this.getCurrentSsrCode();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "currentSsrCode", theCurrentSsrCode), currentHashCode, theCurrentSsrCode);
        }
        {
            String theCurrentModeACode;
            theCurrentModeACode = this.getCurrentModeACode();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "currentModeACode", theCurrentModeACode), currentHashCode, theCurrentModeACode);
        }
        return currentHashCode;
    }

    public int hashCode() {
        final HashCodeStrategy strategy = JAXBHashCodeStrategy.INSTANCE;
        return this.hashCode(null, strategy);
    }

}
