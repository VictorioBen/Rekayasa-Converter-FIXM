//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.4 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2019.10.28 at 02:58:02 PM ICT 
//


package dev.ale.fdx.entity.flight;

import javax.persistence.Basic;
import javax.persistence.CascadeType;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.Table;
import javax.persistence.Transient;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlAttribute;
import javax.xml.bind.annotation.XmlType;
import javax.xml.datatype.Duration;

import org.jvnet.hyperjaxb3.xml.bind.annotation.adapters.DurationAsString;
import org.jvnet.hyperjaxb3.xml.bind.annotation.adapters.XmlAdapterUtils;
import org.jvnet.jaxb2_commons.lang.Equals;
import org.jvnet.jaxb2_commons.lang.EqualsStrategy;
import org.jvnet.jaxb2_commons.lang.HashCode;
import org.jvnet.jaxb2_commons.lang.HashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBEqualsStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBHashCodeStrategy;
import org.jvnet.jaxb2_commons.locator.ObjectLocator;
import org.jvnet.jaxb2_commons.locator.util.LocatorUtils;

import dev.ale.fdx.entity.base.DistanceType;
import dev.ale.fdx.entity.base.ExtensibleType;
import dev.ale.fdx.entity.base.FlightLevelOrAltitudeType;
import dev.ale.fdx.entity.base.TrueAirspeedType;


/**
 * 
 *             A point in a performance climb or descent profile. 
 *          
 * 
 * <p>Java class for ProfilePointType complex type.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType name="ProfilePointType">
 *   &lt;complexContent>
 *     &lt;extension base="{http://www.fixm.aero/base/4.1}ExtensibleType">
 *       &lt;sequence>
 *         &lt;element name="airspeed" type="{http://www.fixm.aero/base/4.1}TrueAirspeedType" minOccurs="0"/>
 *         &lt;element name="distance" type="{http://www.fixm.aero/base/4.1}DistanceType" minOccurs="0"/>
 *         &lt;element name="level" type="{http://www.fixm.aero/base/4.1}FlightLevelOrAltitudeType" minOccurs="0"/>
 *       &lt;/sequence>
 *       &lt;attribute name="time" type="{http://www.fixm.aero/base/4.1}DurationType" />
 *     &lt;/extension>
 *   &lt;/complexContent>
 * &lt;/complexType>
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "ProfilePointType", propOrder = {
    "airspeed",
    "distance",
    "level"
})
@Entity(name = "ProfilePointType")
@Table(name = "PROFILEPOINTTYPE")
public class ProfilePointType
    extends ExtensibleType
    implements Equals, HashCode
{

    protected TrueAirspeedType airspeed;
    protected DistanceType distance;
    protected FlightLevelOrAltitudeType level;
    @XmlAttribute(name = "time")
    protected Duration time;

    /**
     * Gets the value of the airspeed property.
     * 
     * @return
     *     possible object is
     *     {@link TrueAirspeedType }
     *     
     */
    @ManyToOne(targetEntity = TrueAirspeedType.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "AIRSPEED_PROFILEPOINTTYPE_HJ_0")
    public TrueAirspeedType getAirspeed() {
        return airspeed;
    }

    /**
     * Sets the value of the airspeed property.
     * 
     * @param value
     *     allowed object is
     *     {@link TrueAirspeedType }
     *     
     */
    public void setAirspeed(TrueAirspeedType value) {
        this.airspeed = value;
    }

    /**
     * Gets the value of the distance property.
     * 
     * @return
     *     possible object is
     *     {@link DistanceType }
     *     
     */
    @ManyToOne(targetEntity = DistanceType.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "DISTANCE_PROFILEPOINTTYPE_HJ_0")
    public DistanceType getDistance() {
        return distance;
    }

    /**
     * Sets the value of the distance property.
     * 
     * @param value
     *     allowed object is
     *     {@link DistanceType }
     *     
     */
    public void setDistance(DistanceType value) {
        this.distance = value;
    }

    /**
     * Gets the value of the level property.
     * 
     * @return
     *     possible object is
     *     {@link FlightLevelOrAltitudeType }
     *     
     */
    @ManyToOne(targetEntity = FlightLevelOrAltitudeType.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "LEVEL__PROFILEPOINTTYPE_HJID")
    public FlightLevelOrAltitudeType getLevel() {
        return level;
    }

    /**
     * Sets the value of the level property.
     * 
     * @param value
     *     allowed object is
     *     {@link FlightLevelOrAltitudeType }
     *     
     */
    public void setLevel(FlightLevelOrAltitudeType value) {
        this.level = value;
    }

    /**
     * Gets the value of the time property.
     * 
     * @return
     *     possible object is
     *     {@link Duration }
     *     
     */
    @Transient
    public Duration getTime() {
        return time;
    }

    /**
     * Sets the value of the time property.
     * 
     * @param value
     *     allowed object is
     *     {@link Duration }
     *     
     */
    public void setTime(Duration value) {
        this.time = value;
    }

    @Basic
    @Column(name = "TIMEITEM", length = 127)
    public String getTimeItem() {
        return XmlAdapterUtils.unmarshall(DurationAsString.class, this.getTime());
    }

    public void setTimeItem(String target) {
        setTime(XmlAdapterUtils.marshall(DurationAsString.class, target));
    }

    public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy strategy) {
        if (!(object instanceof ProfilePointType)) {
            return false;
        }
        if (this == object) {
            return true;
        }
        if (!super.equals(thisLocator, thatLocator, object, strategy)) {
            return false;
        }
        final ProfilePointType that = ((ProfilePointType) object);
        {
            TrueAirspeedType lhsAirspeed;
            lhsAirspeed = this.getAirspeed();
            TrueAirspeedType rhsAirspeed;
            rhsAirspeed = that.getAirspeed();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "airspeed", lhsAirspeed), LocatorUtils.property(thatLocator, "airspeed", rhsAirspeed), lhsAirspeed, rhsAirspeed)) {
                return false;
            }
        }
        {
            DistanceType lhsDistance;
            lhsDistance = this.getDistance();
            DistanceType rhsDistance;
            rhsDistance = that.getDistance();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "distance", lhsDistance), LocatorUtils.property(thatLocator, "distance", rhsDistance), lhsDistance, rhsDistance)) {
                return false;
            }
        }
        {
            FlightLevelOrAltitudeType lhsLevel;
            lhsLevel = this.getLevel();
            FlightLevelOrAltitudeType rhsLevel;
            rhsLevel = that.getLevel();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "level", lhsLevel), LocatorUtils.property(thatLocator, "level", rhsLevel), lhsLevel, rhsLevel)) {
                return false;
            }
        }
        {
            Duration lhsTime;
            lhsTime = this.getTime();
            Duration rhsTime;
            rhsTime = that.getTime();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "time", lhsTime), LocatorUtils.property(thatLocator, "time", rhsTime), lhsTime, rhsTime)) {
                return false;
            }
        }
        return true;
    }

    public boolean equals(Object object) {
        final EqualsStrategy strategy = JAXBEqualsStrategy.INSTANCE;
        return equals(null, null, object, strategy);
    }

    public int hashCode(ObjectLocator locator, HashCodeStrategy strategy) {
        int currentHashCode = super.hashCode(locator, strategy);
        {
            TrueAirspeedType theAirspeed;
            theAirspeed = this.getAirspeed();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "airspeed", theAirspeed), currentHashCode, theAirspeed);
        }
        {
            DistanceType theDistance;
            theDistance = this.getDistance();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "distance", theDistance), currentHashCode, theDistance);
        }
        {
            FlightLevelOrAltitudeType theLevel;
            theLevel = this.getLevel();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "level", theLevel), currentHashCode, theLevel);
        }
        {
            Duration theTime;
            theTime = this.getTime();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "time", theTime), currentHashCode, theTime);
        }
        return currentHashCode;
    }

    public int hashCode() {
        final HashCodeStrategy strategy = JAXBHashCodeStrategy.INSTANCE;
        return this.hashCode(null, strategy);
    }

}
