//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.4 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2019.10.28 at 02:58:02 PM ICT 
//


package dev.ale.fdx.entity.base;

import javax.persistence.CascadeType;
import javax.persistence.Entity;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.Table;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlType;
import org.jvnet.jaxb2_commons.lang.Equals;
import org.jvnet.jaxb2_commons.lang.EqualsStrategy;
import org.jvnet.jaxb2_commons.lang.HashCode;
import org.jvnet.jaxb2_commons.lang.HashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBEqualsStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBHashCodeStrategy;
import org.jvnet.jaxb2_commons.locator.ObjectLocator;
import org.jvnet.jaxb2_commons.locator.util.LocatorUtils;


/**
 * 
 *             The altitude choice allows to either represent a specific altitude or an altitude 
 *             range with a lower and upper bound 
 *          
 * 
 * <p>Java class for FlightLevelOrAltitudeChoiceType complex type.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType name="FlightLevelOrAltitudeChoiceType">
 *   &lt;complexContent>
 *     &lt;extension base="{http://www.fixm.aero/base/4.1}ExtensibleType">
 *       &lt;choice>
 *         &lt;element name="flightLevelOrAltitudeRange" type="{http://www.fixm.aero/base/4.1}VerticalRangeType" minOccurs="0"/>
 *         &lt;element name="flightLevelOrAltitudeValue" type="{http://www.fixm.aero/base/4.1}FlightLevelOrAltitudeType" minOccurs="0"/>
 *       &lt;/choice>
 *     &lt;/extension>
 *   &lt;/complexContent>
 * &lt;/complexType>
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "FlightLevelOrAltitudeChoiceType", propOrder = {
    "flightLevelOrAltitudeRange",
    "flightLevelOrAltitudeValue"
})
@Entity(name = "FlightLevelOrAltitudeChoiceType")
@Table(name = "FLIGHTLEVELORALTITUDECHOICET_0")
public class FlightLevelOrAltitudeChoiceType
    extends ExtensibleType
    implements Equals, HashCode
{

    protected VerticalRangeType flightLevelOrAltitudeRange;
    protected FlightLevelOrAltitudeType flightLevelOrAltitudeValue;

    /**
     * Gets the value of the flightLevelOrAltitudeRange property.
     * 
     * @return
     *     possible object is
     *     {@link VerticalRangeType }
     *     
     */
    @ManyToOne(targetEntity = VerticalRangeType.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "FLIGHTLEVELORALTITUDERANGE_F_0")
    public VerticalRangeType getFlightLevelOrAltitudeRange() {
        return flightLevelOrAltitudeRange;
    }

    /**
     * Sets the value of the flightLevelOrAltitudeRange property.
     * 
     * @param value
     *     allowed object is
     *     {@link VerticalRangeType }
     *     
     */
    public void setFlightLevelOrAltitudeRange(VerticalRangeType value) {
        this.flightLevelOrAltitudeRange = value;
    }

    /**
     * Gets the value of the flightLevelOrAltitudeValue property.
     * 
     * @return
     *     possible object is
     *     {@link FlightLevelOrAltitudeType }
     *     
     */
    @ManyToOne(targetEntity = FlightLevelOrAltitudeType.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "FLIGHTLEVELORALTITUDEVALUE_F_0")
    public FlightLevelOrAltitudeType getFlightLevelOrAltitudeValue() {
        return flightLevelOrAltitudeValue;
    }

    /**
     * Sets the value of the flightLevelOrAltitudeValue property.
     * 
     * @param value
     *     allowed object is
     *     {@link FlightLevelOrAltitudeType }
     *     
     */
    public void setFlightLevelOrAltitudeValue(FlightLevelOrAltitudeType value) {
        this.flightLevelOrAltitudeValue = value;
    }

    public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy strategy) {
        if (!(object instanceof FlightLevelOrAltitudeChoiceType)) {
            return false;
        }
        if (this == object) {
            return true;
        }
        if (!super.equals(thisLocator, thatLocator, object, strategy)) {
            return false;
        }
        final FlightLevelOrAltitudeChoiceType that = ((FlightLevelOrAltitudeChoiceType) object);
        {
            VerticalRangeType lhsFlightLevelOrAltitudeRange;
            lhsFlightLevelOrAltitudeRange = this.getFlightLevelOrAltitudeRange();
            VerticalRangeType rhsFlightLevelOrAltitudeRange;
            rhsFlightLevelOrAltitudeRange = that.getFlightLevelOrAltitudeRange();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "flightLevelOrAltitudeRange", lhsFlightLevelOrAltitudeRange), LocatorUtils.property(thatLocator, "flightLevelOrAltitudeRange", rhsFlightLevelOrAltitudeRange), lhsFlightLevelOrAltitudeRange, rhsFlightLevelOrAltitudeRange)) {
                return false;
            }
        }
        {
            FlightLevelOrAltitudeType lhsFlightLevelOrAltitudeValue;
            lhsFlightLevelOrAltitudeValue = this.getFlightLevelOrAltitudeValue();
            FlightLevelOrAltitudeType rhsFlightLevelOrAltitudeValue;
            rhsFlightLevelOrAltitudeValue = that.getFlightLevelOrAltitudeValue();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "flightLevelOrAltitudeValue", lhsFlightLevelOrAltitudeValue), LocatorUtils.property(thatLocator, "flightLevelOrAltitudeValue", rhsFlightLevelOrAltitudeValue), lhsFlightLevelOrAltitudeValue, rhsFlightLevelOrAltitudeValue)) {
                return false;
            }
        }
        return true;
    }

    public boolean equals(Object object) {
        final EqualsStrategy strategy = JAXBEqualsStrategy.INSTANCE;
        return equals(null, null, object, strategy);
    }

    public int hashCode(ObjectLocator locator, HashCodeStrategy strategy) {
        int currentHashCode = super.hashCode(locator, strategy);
        {
            VerticalRangeType theFlightLevelOrAltitudeRange;
            theFlightLevelOrAltitudeRange = this.getFlightLevelOrAltitudeRange();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "flightLevelOrAltitudeRange", theFlightLevelOrAltitudeRange), currentHashCode, theFlightLevelOrAltitudeRange);
        }
        {
            FlightLevelOrAltitudeType theFlightLevelOrAltitudeValue;
            theFlightLevelOrAltitudeValue = this.getFlightLevelOrAltitudeValue();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "flightLevelOrAltitudeValue", theFlightLevelOrAltitudeValue), currentHashCode, theFlightLevelOrAltitudeValue);
        }
        return currentHashCode;
    }

    public int hashCode() {
        final HashCodeStrategy strategy = JAXBHashCodeStrategy.INSTANCE;
        return this.hashCode(null, strategy);
    }

}
