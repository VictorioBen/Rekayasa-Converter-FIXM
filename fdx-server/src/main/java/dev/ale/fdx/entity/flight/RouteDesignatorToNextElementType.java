//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.4 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2019.10.28 at 02:58:02 PM ICT 
//


package dev.ale.fdx.entity.flight;

import javax.persistence.Basic;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.Table;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlType;

import org.jvnet.jaxb2_commons.lang.Equals;
import org.jvnet.jaxb2_commons.lang.EqualsStrategy;
import org.jvnet.jaxb2_commons.lang.HashCode;
import org.jvnet.jaxb2_commons.lang.HashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBEqualsStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBHashCodeStrategy;
import org.jvnet.jaxb2_commons.locator.ObjectLocator;
import org.jvnet.jaxb2_commons.locator.util.LocatorUtils;

import dev.ale.fdx.entity.base.ExtensibleType;


/**
 * 
 *             The route (airway) to the next element on the route. Can be either an en route airway, 
 *             standard instrument departure route, or standard instrument arrival route. [FIXM] 
 *             
 *          
 * 
 * <p>Java class for RouteDesignatorToNextElementType complex type.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType name="RouteDesignatorToNextElementType">
 *   &lt;complexContent>
 *     &lt;extension base="{http://www.fixm.aero/base/4.1}ExtensibleType">
 *       &lt;choice>
 *         &lt;element name="routeDesignator" type="{http://www.fixm.aero/base/4.1}RouteDesignatorType" minOccurs="0"/>
 *         &lt;element name="standardInstrumentArrival" type="{http://www.fixm.aero/base/4.1}SidStarDesignatorType" minOccurs="0"/>
 *         &lt;element name="standardInstrumentDeparture" type="{http://www.fixm.aero/base/4.1}SidStarDesignatorType" minOccurs="0"/>
 *       &lt;/choice>
 *     &lt;/extension>
 *   &lt;/complexContent>
 * &lt;/complexType>
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "RouteDesignatorToNextElementType", propOrder = {
    "routeDesignator",
    "standardInstrumentArrival",
    "standardInstrumentDeparture"
})
@Entity(name = "RouteDesignatorToNextElementType")
@Table(name = "ROUTEDESIGNATORTONEXTELEMENT_0")
public class RouteDesignatorToNextElementType
    extends ExtensibleType
    implements Equals, HashCode
{

    protected String routeDesignator;
    protected String standardInstrumentArrival;
    protected String standardInstrumentDeparture;

    /**
     * Gets the value of the routeDesignator property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    @Basic
    @Column(name = "ROUTEDESIGNATOR", length = 4096)
    public String getRouteDesignator() {
        return routeDesignator;
    }

    /**
     * Sets the value of the routeDesignator property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setRouteDesignator(String value) {
        this.routeDesignator = value;
    }

    /**
     * Gets the value of the standardInstrumentArrival property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    @Basic
    @Column(name = "STANDARDINSTRUMENTARRIVAL", length = 7)
    public String getStandardInstrumentArrival() {
        return standardInstrumentArrival;
    }

    /**
     * Sets the value of the standardInstrumentArrival property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setStandardInstrumentArrival(String value) {
        this.standardInstrumentArrival = value;
    }

    /**
     * Gets the value of the standardInstrumentDeparture property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    @Basic
    @Column(name = "STANDARDINSTRUMENTDEPARTURE", length = 7)
    public String getStandardInstrumentDeparture() {
        return standardInstrumentDeparture;
    }

    /**
     * Sets the value of the standardInstrumentDeparture property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setStandardInstrumentDeparture(String value) {
        this.standardInstrumentDeparture = value;
    }

    public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy strategy) {
        if (!(object instanceof RouteDesignatorToNextElementType)) {
            return false;
        }
        if (this == object) {
            return true;
        }
        if (!super.equals(thisLocator, thatLocator, object, strategy)) {
            return false;
        }
        final RouteDesignatorToNextElementType that = ((RouteDesignatorToNextElementType) object);
        {
            String lhsRouteDesignator;
            lhsRouteDesignator = this.getRouteDesignator();
            String rhsRouteDesignator;
            rhsRouteDesignator = that.getRouteDesignator();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "routeDesignator", lhsRouteDesignator), LocatorUtils.property(thatLocator, "routeDesignator", rhsRouteDesignator), lhsRouteDesignator, rhsRouteDesignator)) {
                return false;
            }
        }
        {
            String lhsStandardInstrumentArrival;
            lhsStandardInstrumentArrival = this.getStandardInstrumentArrival();
            String rhsStandardInstrumentArrival;
            rhsStandardInstrumentArrival = that.getStandardInstrumentArrival();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "standardInstrumentArrival", lhsStandardInstrumentArrival), LocatorUtils.property(thatLocator, "standardInstrumentArrival", rhsStandardInstrumentArrival), lhsStandardInstrumentArrival, rhsStandardInstrumentArrival)) {
                return false;
            }
        }
        {
            String lhsStandardInstrumentDeparture;
            lhsStandardInstrumentDeparture = this.getStandardInstrumentDeparture();
            String rhsStandardInstrumentDeparture;
            rhsStandardInstrumentDeparture = that.getStandardInstrumentDeparture();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "standardInstrumentDeparture", lhsStandardInstrumentDeparture), LocatorUtils.property(thatLocator, "standardInstrumentDeparture", rhsStandardInstrumentDeparture), lhsStandardInstrumentDeparture, rhsStandardInstrumentDeparture)) {
                return false;
            }
        }
        return true;
    }

    public boolean equals(Object object) {
        final EqualsStrategy strategy = JAXBEqualsStrategy.INSTANCE;
        return equals(null, null, object, strategy);
    }

    public int hashCode(ObjectLocator locator, HashCodeStrategy strategy) {
        int currentHashCode = super.hashCode(locator, strategy);
        {
            String theRouteDesignator;
            theRouteDesignator = this.getRouteDesignator();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "routeDesignator", theRouteDesignator), currentHashCode, theRouteDesignator);
        }
        {
            String theStandardInstrumentArrival;
            theStandardInstrumentArrival = this.getStandardInstrumentArrival();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "standardInstrumentArrival", theStandardInstrumentArrival), currentHashCode, theStandardInstrumentArrival);
        }
        {
            String theStandardInstrumentDeparture;
            theStandardInstrumentDeparture = this.getStandardInstrumentDeparture();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "standardInstrumentDeparture", theStandardInstrumentDeparture), currentHashCode, theStandardInstrumentDeparture);
        }
        return currentHashCode;
    }

    public int hashCode() {
        final HashCodeStrategy strategy = JAXBHashCodeStrategy.INSTANCE;
        return this.hashCode(null, strategy);
    }

}
