//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.4 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2019.10.28 at 02:58:02 PM ICT 
//


package dev.ale.fdx.entity.flight;

import java.util.ArrayList;
import java.util.List;
import javax.persistence.Basic;
import javax.persistence.CascadeType;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.EnumType;
import javax.persistence.Enumerated;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.Table;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlAttribute;
import javax.xml.bind.annotation.XmlType;

import org.jvnet.jaxb2_commons.lang.Equals;
import org.jvnet.jaxb2_commons.lang.EqualsStrategy;
import org.jvnet.jaxb2_commons.lang.HashCode;
import org.jvnet.jaxb2_commons.lang.HashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBEqualsStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBHashCodeStrategy;
import org.jvnet.jaxb2_commons.locator.ObjectLocator;
import org.jvnet.jaxb2_commons.locator.util.LocatorUtils;

import dev.ale.fdx.entity.base.DistanceType;
import dev.ale.fdx.entity.base.ExtensibleType;
import dev.ale.fdx.entity.base.SignificantPointType;


/**
 * 
 *             A container for information pertinent to a single point in a trajectory. 
 *          
 * 
 * <p>Java class for FlightRouteElementType complex type.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType name="FlightRouteElementType">
 *   &lt;complexContent>
 *     &lt;extension base="{http://www.fixm.aero/base/4.1}ExtensibleType">
 *       &lt;sequence>
 *         &lt;element name="alongRouteDistance" type="{http://www.fixm.aero/base/4.1}DistanceType" minOccurs="0"/>
 *         &lt;element name="constraint" type="{http://www.fixm.aero/flight/4.1}AbstractConstraintType" maxOccurs="2000" minOccurs="0"/>
 *         &lt;element name="enRouteDelay" type="{http://www.fixm.aero/flight/4.1}EnRouteDelayType" minOccurs="0"/>
 *         &lt;element name="point4D" type="{http://www.fixm.aero/flight/4.1}TrajectoryPoint4DType" minOccurs="0"/>
 *         &lt;element name="routeChange" type="{http://www.fixm.aero/flight/4.1}AbstractRouteChangeType" maxOccurs="2000" minOccurs="0"/>
 *         &lt;element name="routeDesignatorToNextElement" type="{http://www.fixm.aero/flight/4.1}RouteDesignatorToNextElementType" minOccurs="0"/>
 *         &lt;element name="routePoint" type="{http://www.fixm.aero/base/4.1}SignificantPointType" minOccurs="0"/>
 *         &lt;element name="sidStarAbbreviatedDesignatorToNextElement" type="{http://www.fixm.aero/flight/4.1}SidStarAbbreviatedDesignatorToNextElementType" minOccurs="0"/>
 *       &lt;/sequence>
 *       &lt;attribute name="flightRulesChange" type="{http://www.fixm.aero/flight/4.1}FlightRulesType" />
 *       &lt;attribute name="modified" type="{http://www.fixm.aero/flight/4.1}ModifiedRouteItemIndicatorType" />
 *       &lt;attribute name="modifiedRouteItemReference" type="{http://www.fixm.aero/base/4.1}CharacterStringType" />
 *       &lt;attribute name="routeTerminationIndicator" type="{http://www.fixm.aero/flight/4.1}RouteTruncationIndicatorType" />
 *       &lt;attribute name="routeTruncationIndicator" type="{http://www.fixm.aero/flight/4.1}RouteTruncationIndicatorType" />
 *       &lt;attribute name="seqNum">
 *         &lt;simpleType>
 *           &lt;restriction base="{http://www.w3.org/2001/XMLSchema}int">
 *             &lt;minInclusive value="0"/>
 *           &lt;/restriction>
 *         &lt;/simpleType>
 *       &lt;/attribute>
 *     &lt;/extension>
 *   &lt;/complexContent>
 * &lt;/complexType>
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "FlightRouteElementType", propOrder = {
    "alongRouteDistance",
    "constraint",
    "enRouteDelay",
    "point4D",
    "routeChange",
    "routeDesignatorToNextElement",
    "routePoint",
    "sidStarAbbreviatedDesignatorToNextElement"
})
@Entity(name = "FlightRouteElementType")
@Table(name = "FLIGHTROUTEELEMENTTYPE")
public class FlightRouteElementType
    extends ExtensibleType
    implements Equals, HashCode
{

    protected DistanceType alongRouteDistance;
    protected List<AbstractConstraintType> constraint;
    protected EnRouteDelayType enRouteDelay;
    protected TrajectoryPoint4DType point4D;
    protected List<AbstractRouteChangeType> routeChange;
    protected RouteDesignatorToNextElementType routeDesignatorToNextElement;
    protected SignificantPointType routePoint;
    protected SidStarAbbreviatedDesignatorToNextElementType sidStarAbbreviatedDesignatorToNextElement;
    @XmlAttribute(name = "flightRulesChange")
    protected FlightRulesType flightRulesChange;
    @XmlAttribute(name = "modified")
    protected ModifiedRouteItemIndicatorType modified;
    @XmlAttribute(name = "modifiedRouteItemReference")
    protected String modifiedRouteItemReference;
    @XmlAttribute(name = "routeTerminationIndicator")
    protected RouteTruncationIndicatorType routeTerminationIndicator;
    @XmlAttribute(name = "routeTruncationIndicator")
    protected RouteTruncationIndicatorType routeTruncationIndicator;
    @XmlAttribute(name = "seqNum")
    protected Integer seqNum;

    /**
     * Gets the value of the alongRouteDistance property.
     * 
     * @return
     *     possible object is
     *     {@link DistanceType }
     *     
     */
    @ManyToOne(targetEntity = DistanceType.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "ALONGROUTEDISTANCE_FLIGHTROU_0")
    public DistanceType getAlongRouteDistance() {
        return alongRouteDistance;
    }

    /**
     * Sets the value of the alongRouteDistance property.
     * 
     * @param value
     *     allowed object is
     *     {@link DistanceType }
     *     
     */
    public void setAlongRouteDistance(DistanceType value) {
        this.alongRouteDistance = value;
    }

    /**
     * Gets the value of the constraint property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the constraint property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getConstraint().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link AbstractConstraintType }
     * 
     * 
     */
    @OneToMany(targetEntity = AbstractConstraintType.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "CONSTRAINT__FLIGHTROUTEELEME_0")
    public List<AbstractConstraintType> getConstraint() {
        if (constraint == null) {
            constraint = new ArrayList<AbstractConstraintType>();
        }
        return this.constraint;
    }

    /**
     * 
     * 
     */
    public void setConstraint(List<AbstractConstraintType> constraint) {
        this.constraint = constraint;
    }

    /**
     * Gets the value of the enRouteDelay property.
     * 
     * @return
     *     possible object is
     *     {@link EnRouteDelayType }
     *     
     */
    @ManyToOne(targetEntity = EnRouteDelayType.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "ENROUTEDELAY_FLIGHTROUTEELEM_0")
    public EnRouteDelayType getEnRouteDelay() {
        return enRouteDelay;
    }

    /**
     * Sets the value of the enRouteDelay property.
     * 
     * @param value
     *     allowed object is
     *     {@link EnRouteDelayType }
     *     
     */
    public void setEnRouteDelay(EnRouteDelayType value) {
        this.enRouteDelay = value;
    }

    /**
     * Gets the value of the point4D property.
     * 
     * @return
     *     possible object is
     *     {@link TrajectoryPoint4DType }
     *     
     */
    @ManyToOne(targetEntity = TrajectoryPoint4DType.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "POINT4D_FLIGHTROUTEELEMENTTY_0")
    public TrajectoryPoint4DType getPoint4D() {
        return point4D;
    }

    /**
     * Sets the value of the point4D property.
     * 
     * @param value
     *     allowed object is
     *     {@link TrajectoryPoint4DType }
     *     
     */
    public void setPoint4D(TrajectoryPoint4DType value) {
        this.point4D = value;
    }

    /**
     * Gets the value of the routeChange property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the routeChange property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getRouteChange().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link AbstractRouteChangeType }
     * 
     * 
     */
    @OneToMany(targetEntity = AbstractRouteChangeType.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "ROUTECHANGE_FLIGHTROUTEELEME_0")
    public List<AbstractRouteChangeType> getRouteChange() {
        if (routeChange == null) {
            routeChange = new ArrayList<AbstractRouteChangeType>();
        }
        return this.routeChange;
    }

    /**
     * 
     * 
     */
    public void setRouteChange(List<AbstractRouteChangeType> routeChange) {
        this.routeChange = routeChange;
    }

    /**
     * Gets the value of the routeDesignatorToNextElement property.
     * 
     * @return
     *     possible object is
     *     {@link RouteDesignatorToNextElementType }
     *     
     */
    @ManyToOne(targetEntity = RouteDesignatorToNextElementType.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "ROUTEDESIGNATORTONEXTELEMENT_1")
    public RouteDesignatorToNextElementType getRouteDesignatorToNextElement() {
        return routeDesignatorToNextElement;
    }

    /**
     * Sets the value of the routeDesignatorToNextElement property.
     * 
     * @param value
     *     allowed object is
     *     {@link RouteDesignatorToNextElementType }
     *     
     */
    public void setRouteDesignatorToNextElement(RouteDesignatorToNextElementType value) {
        this.routeDesignatorToNextElement = value;
    }

    /**
     * Gets the value of the routePoint property.
     * 
     * @return
     *     possible object is
     *     {@link SignificantPointType }
     *     
     */
    @ManyToOne(targetEntity = SignificantPointType.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "ROUTEPOINT_FLIGHTROUTEELEMEN_0")
    public SignificantPointType getRoutePoint() {
        return routePoint;
    }

    /**
     * Sets the value of the routePoint property.
     * 
     * @param value
     *     allowed object is
     *     {@link SignificantPointType }
     *     
     */
    public void setRoutePoint(SignificantPointType value) {
        this.routePoint = value;
    }

    /**
     * Gets the value of the sidStarAbbreviatedDesignatorToNextElement property.
     * 
     * @return
     *     possible object is
     *     {@link SidStarAbbreviatedDesignatorToNextElementType }
     *     
     */
    @ManyToOne(targetEntity = SidStarAbbreviatedDesignatorToNextElementType.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "SIDSTARABBREVIATEDDESIGNATOR_1")
    public SidStarAbbreviatedDesignatorToNextElementType getSidStarAbbreviatedDesignatorToNextElement() {
        return sidStarAbbreviatedDesignatorToNextElement;
    }

    /**
     * Sets the value of the sidStarAbbreviatedDesignatorToNextElement property.
     * 
     * @param value
     *     allowed object is
     *     {@link SidStarAbbreviatedDesignatorToNextElementType }
     *     
     */
    public void setSidStarAbbreviatedDesignatorToNextElement(SidStarAbbreviatedDesignatorToNextElementType value) {
        this.sidStarAbbreviatedDesignatorToNextElement = value;
    }

    /**
     * Gets the value of the flightRulesChange property.
     * 
     * @return
     *     possible object is
     *     {@link FlightRulesType }
     *     
     */
    @Basic
    @Column(name = "FLIGHTRULESCHANGE", length = 255)
    @Enumerated(EnumType.STRING)
    public FlightRulesType getFlightRulesChange() {
        return flightRulesChange;
    }

    /**
     * Sets the value of the flightRulesChange property.
     * 
     * @param value
     *     allowed object is
     *     {@link FlightRulesType }
     *     
     */
    public void setFlightRulesChange(FlightRulesType value) {
        this.flightRulesChange = value;
    }

    /**
     * Gets the value of the modified property.
     * 
     * @return
     *     possible object is
     *     {@link ModifiedRouteItemIndicatorType }
     *     
     */
    @Basic
    @Column(name = "MODIFIED", length = 255)
    @Enumerated(EnumType.STRING)
    public ModifiedRouteItemIndicatorType getModified() {
        return modified;
    }

    /**
     * Sets the value of the modified property.
     * 
     * @param value
     *     allowed object is
     *     {@link ModifiedRouteItemIndicatorType }
     *     
     */
    public void setModified(ModifiedRouteItemIndicatorType value) {
        this.modified = value;
    }

    /**
     * Gets the value of the modifiedRouteItemReference property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    @Basic
    @Column(name = "MODIFIEDROUTEITEMREFERENCE", length = 4096)
    public String getModifiedRouteItemReference() {
        return modifiedRouteItemReference;
    }

    /**
     * Sets the value of the modifiedRouteItemReference property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setModifiedRouteItemReference(String value) {
        this.modifiedRouteItemReference = value;
    }

    /**
     * Gets the value of the routeTerminationIndicator property.
     * 
     * @return
     *     possible object is
     *     {@link RouteTruncationIndicatorType }
     *     
     */
    @Basic
    @Column(name = "ROUTETERMINATIONINDICATOR", length = 255)
    @Enumerated(EnumType.STRING)
    public RouteTruncationIndicatorType getRouteTerminationIndicator() {
        return routeTerminationIndicator;
    }

    /**
     * Sets the value of the routeTerminationIndicator property.
     * 
     * @param value
     *     allowed object is
     *     {@link RouteTruncationIndicatorType }
     *     
     */
    public void setRouteTerminationIndicator(RouteTruncationIndicatorType value) {
        this.routeTerminationIndicator = value;
    }

    /**
     * Gets the value of the routeTruncationIndicator property.
     * 
     * @return
     *     possible object is
     *     {@link RouteTruncationIndicatorType }
     *     
     */
    @Basic
    @Column(name = "ROUTETRUNCATIONINDICATOR", length = 255)
    @Enumerated(EnumType.STRING)
    public RouteTruncationIndicatorType getRouteTruncationIndicator() {
        return routeTruncationIndicator;
    }

    /**
     * Sets the value of the routeTruncationIndicator property.
     * 
     * @param value
     *     allowed object is
     *     {@link RouteTruncationIndicatorType }
     *     
     */
    public void setRouteTruncationIndicator(RouteTruncationIndicatorType value) {
        this.routeTruncationIndicator = value;
    }

    /**
     * Gets the value of the seqNum property.
     * 
     * @return
     *     possible object is
     *     {@link Integer }
     *     
     */
    @Basic
    @Column(name = "SEQNUM", scale = 0)
    public Integer getSeqNum() {
        return seqNum;
    }

    /**
     * Sets the value of the seqNum property.
     * 
     * @param value
     *     allowed object is
     *     {@link Integer }
     *     
     */
    public void setSeqNum(Integer value) {
        this.seqNum = value;
    }

    public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy strategy) {
        if (!(object instanceof FlightRouteElementType)) {
            return false;
        }
        if (this == object) {
            return true;
        }
        if (!super.equals(thisLocator, thatLocator, object, strategy)) {
            return false;
        }
        final FlightRouteElementType that = ((FlightRouteElementType) object);
        {
            DistanceType lhsAlongRouteDistance;
            lhsAlongRouteDistance = this.getAlongRouteDistance();
            DistanceType rhsAlongRouteDistance;
            rhsAlongRouteDistance = that.getAlongRouteDistance();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "alongRouteDistance", lhsAlongRouteDistance), LocatorUtils.property(thatLocator, "alongRouteDistance", rhsAlongRouteDistance), lhsAlongRouteDistance, rhsAlongRouteDistance)) {
                return false;
            }
        }
        {
            List<AbstractConstraintType> lhsConstraint;
            lhsConstraint = (((this.constraint!= null)&&(!this.constraint.isEmpty()))?this.getConstraint():null);
            List<AbstractConstraintType> rhsConstraint;
            rhsConstraint = (((that.constraint!= null)&&(!that.constraint.isEmpty()))?that.getConstraint():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "constraint", lhsConstraint), LocatorUtils.property(thatLocator, "constraint", rhsConstraint), lhsConstraint, rhsConstraint)) {
                return false;
            }
        }
        {
            EnRouteDelayType lhsEnRouteDelay;
            lhsEnRouteDelay = this.getEnRouteDelay();
            EnRouteDelayType rhsEnRouteDelay;
            rhsEnRouteDelay = that.getEnRouteDelay();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "enRouteDelay", lhsEnRouteDelay), LocatorUtils.property(thatLocator, "enRouteDelay", rhsEnRouteDelay), lhsEnRouteDelay, rhsEnRouteDelay)) {
                return false;
            }
        }
        {
            TrajectoryPoint4DType lhsPoint4D;
            lhsPoint4D = this.getPoint4D();
            TrajectoryPoint4DType rhsPoint4D;
            rhsPoint4D = that.getPoint4D();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "point4D", lhsPoint4D), LocatorUtils.property(thatLocator, "point4D", rhsPoint4D), lhsPoint4D, rhsPoint4D)) {
                return false;
            }
        }
        {
            List<AbstractRouteChangeType> lhsRouteChange;
            lhsRouteChange = (((this.routeChange!= null)&&(!this.routeChange.isEmpty()))?this.getRouteChange():null);
            List<AbstractRouteChangeType> rhsRouteChange;
            rhsRouteChange = (((that.routeChange!= null)&&(!that.routeChange.isEmpty()))?that.getRouteChange():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "routeChange", lhsRouteChange), LocatorUtils.property(thatLocator, "routeChange", rhsRouteChange), lhsRouteChange, rhsRouteChange)) {
                return false;
            }
        }
        {
            RouteDesignatorToNextElementType lhsRouteDesignatorToNextElement;
            lhsRouteDesignatorToNextElement = this.getRouteDesignatorToNextElement();
            RouteDesignatorToNextElementType rhsRouteDesignatorToNextElement;
            rhsRouteDesignatorToNextElement = that.getRouteDesignatorToNextElement();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "routeDesignatorToNextElement", lhsRouteDesignatorToNextElement), LocatorUtils.property(thatLocator, "routeDesignatorToNextElement", rhsRouteDesignatorToNextElement), lhsRouteDesignatorToNextElement, rhsRouteDesignatorToNextElement)) {
                return false;
            }
        }
        {
            SignificantPointType lhsRoutePoint;
            lhsRoutePoint = this.getRoutePoint();
            SignificantPointType rhsRoutePoint;
            rhsRoutePoint = that.getRoutePoint();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "routePoint", lhsRoutePoint), LocatorUtils.property(thatLocator, "routePoint", rhsRoutePoint), lhsRoutePoint, rhsRoutePoint)) {
                return false;
            }
        }
        {
            SidStarAbbreviatedDesignatorToNextElementType lhsSidStarAbbreviatedDesignatorToNextElement;
            lhsSidStarAbbreviatedDesignatorToNextElement = this.getSidStarAbbreviatedDesignatorToNextElement();
            SidStarAbbreviatedDesignatorToNextElementType rhsSidStarAbbreviatedDesignatorToNextElement;
            rhsSidStarAbbreviatedDesignatorToNextElement = that.getSidStarAbbreviatedDesignatorToNextElement();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "sidStarAbbreviatedDesignatorToNextElement", lhsSidStarAbbreviatedDesignatorToNextElement), LocatorUtils.property(thatLocator, "sidStarAbbreviatedDesignatorToNextElement", rhsSidStarAbbreviatedDesignatorToNextElement), lhsSidStarAbbreviatedDesignatorToNextElement, rhsSidStarAbbreviatedDesignatorToNextElement)) {
                return false;
            }
        }
        {
            FlightRulesType lhsFlightRulesChange;
            lhsFlightRulesChange = this.getFlightRulesChange();
            FlightRulesType rhsFlightRulesChange;
            rhsFlightRulesChange = that.getFlightRulesChange();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "flightRulesChange", lhsFlightRulesChange), LocatorUtils.property(thatLocator, "flightRulesChange", rhsFlightRulesChange), lhsFlightRulesChange, rhsFlightRulesChange)) {
                return false;
            }
        }
        {
            ModifiedRouteItemIndicatorType lhsModified;
            lhsModified = this.getModified();
            ModifiedRouteItemIndicatorType rhsModified;
            rhsModified = that.getModified();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "modified", lhsModified), LocatorUtils.property(thatLocator, "modified", rhsModified), lhsModified, rhsModified)) {
                return false;
            }
        }
        {
            String lhsModifiedRouteItemReference;
            lhsModifiedRouteItemReference = this.getModifiedRouteItemReference();
            String rhsModifiedRouteItemReference;
            rhsModifiedRouteItemReference = that.getModifiedRouteItemReference();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "modifiedRouteItemReference", lhsModifiedRouteItemReference), LocatorUtils.property(thatLocator, "modifiedRouteItemReference", rhsModifiedRouteItemReference), lhsModifiedRouteItemReference, rhsModifiedRouteItemReference)) {
                return false;
            }
        }
        {
            RouteTruncationIndicatorType lhsRouteTerminationIndicator;
            lhsRouteTerminationIndicator = this.getRouteTerminationIndicator();
            RouteTruncationIndicatorType rhsRouteTerminationIndicator;
            rhsRouteTerminationIndicator = that.getRouteTerminationIndicator();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "routeTerminationIndicator", lhsRouteTerminationIndicator), LocatorUtils.property(thatLocator, "routeTerminationIndicator", rhsRouteTerminationIndicator), lhsRouteTerminationIndicator, rhsRouteTerminationIndicator)) {
                return false;
            }
        }
        {
            RouteTruncationIndicatorType lhsRouteTruncationIndicator;
            lhsRouteTruncationIndicator = this.getRouteTruncationIndicator();
            RouteTruncationIndicatorType rhsRouteTruncationIndicator;
            rhsRouteTruncationIndicator = that.getRouteTruncationIndicator();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "routeTruncationIndicator", lhsRouteTruncationIndicator), LocatorUtils.property(thatLocator, "routeTruncationIndicator", rhsRouteTruncationIndicator), lhsRouteTruncationIndicator, rhsRouteTruncationIndicator)) {
                return false;
            }
        }
        {
            Integer lhsSeqNum;
            lhsSeqNum = this.getSeqNum();
            Integer rhsSeqNum;
            rhsSeqNum = that.getSeqNum();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "seqNum", lhsSeqNum), LocatorUtils.property(thatLocator, "seqNum", rhsSeqNum), lhsSeqNum, rhsSeqNum)) {
                return false;
            }
        }
        return true;
    }

    public boolean equals(Object object) {
        final EqualsStrategy strategy = JAXBEqualsStrategy.INSTANCE;
        return equals(null, null, object, strategy);
    }

    public int hashCode(ObjectLocator locator, HashCodeStrategy strategy) {
        int currentHashCode = super.hashCode(locator, strategy);
        {
            DistanceType theAlongRouteDistance;
            theAlongRouteDistance = this.getAlongRouteDistance();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "alongRouteDistance", theAlongRouteDistance), currentHashCode, theAlongRouteDistance);
        }
        {
            List<AbstractConstraintType> theConstraint;
            theConstraint = (((this.constraint!= null)&&(!this.constraint.isEmpty()))?this.getConstraint():null);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "constraint", theConstraint), currentHashCode, theConstraint);
        }
        {
            EnRouteDelayType theEnRouteDelay;
            theEnRouteDelay = this.getEnRouteDelay();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "enRouteDelay", theEnRouteDelay), currentHashCode, theEnRouteDelay);
        }
        {
            TrajectoryPoint4DType thePoint4D;
            thePoint4D = this.getPoint4D();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "point4D", thePoint4D), currentHashCode, thePoint4D);
        }
        {
            List<AbstractRouteChangeType> theRouteChange;
            theRouteChange = (((this.routeChange!= null)&&(!this.routeChange.isEmpty()))?this.getRouteChange():null);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "routeChange", theRouteChange), currentHashCode, theRouteChange);
        }
        {
            RouteDesignatorToNextElementType theRouteDesignatorToNextElement;
            theRouteDesignatorToNextElement = this.getRouteDesignatorToNextElement();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "routeDesignatorToNextElement", theRouteDesignatorToNextElement), currentHashCode, theRouteDesignatorToNextElement);
        }
        {
            SignificantPointType theRoutePoint;
            theRoutePoint = this.getRoutePoint();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "routePoint", theRoutePoint), currentHashCode, theRoutePoint);
        }
        {
            SidStarAbbreviatedDesignatorToNextElementType theSidStarAbbreviatedDesignatorToNextElement;
            theSidStarAbbreviatedDesignatorToNextElement = this.getSidStarAbbreviatedDesignatorToNextElement();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "sidStarAbbreviatedDesignatorToNextElement", theSidStarAbbreviatedDesignatorToNextElement), currentHashCode, theSidStarAbbreviatedDesignatorToNextElement);
        }
        {
            FlightRulesType theFlightRulesChange;
            theFlightRulesChange = this.getFlightRulesChange();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "flightRulesChange", theFlightRulesChange), currentHashCode, theFlightRulesChange);
        }
        {
            ModifiedRouteItemIndicatorType theModified;
            theModified = this.getModified();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "modified", theModified), currentHashCode, theModified);
        }
        {
            String theModifiedRouteItemReference;
            theModifiedRouteItemReference = this.getModifiedRouteItemReference();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "modifiedRouteItemReference", theModifiedRouteItemReference), currentHashCode, theModifiedRouteItemReference);
        }
        {
            RouteTruncationIndicatorType theRouteTerminationIndicator;
            theRouteTerminationIndicator = this.getRouteTerminationIndicator();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "routeTerminationIndicator", theRouteTerminationIndicator), currentHashCode, theRouteTerminationIndicator);
        }
        {
            RouteTruncationIndicatorType theRouteTruncationIndicator;
            theRouteTruncationIndicator = this.getRouteTruncationIndicator();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "routeTruncationIndicator", theRouteTruncationIndicator), currentHashCode, theRouteTruncationIndicator);
        }
        {
            Integer theSeqNum;
            theSeqNum = this.getSeqNum();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "seqNum", theSeqNum), currentHashCode, theSeqNum);
        }
        return currentHashCode;
    }

    public int hashCode() {
        final HashCodeStrategy strategy = JAXBHashCodeStrategy.INSTANCE;
        return this.hashCode(null, strategy);
    }

}
