//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.4 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2019.10.28 at 02:58:02 PM ICT 
//


package dev.ale.fdx.entity.flight;

import javax.persistence.CascadeType;
import javax.persistence.Entity;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.Table;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlType;

import org.jvnet.jaxb2_commons.lang.Equals;
import org.jvnet.jaxb2_commons.lang.EqualsStrategy;
import org.jvnet.jaxb2_commons.lang.HashCode;
import org.jvnet.jaxb2_commons.lang.HashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBEqualsStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBHashCodeStrategy;
import org.jvnet.jaxb2_commons.locator.ObjectLocator;
import org.jvnet.jaxb2_commons.locator.util.LocatorUtils;

import dev.ale.fdx.entity.base.ExtensibleType;
import dev.ale.fdx.entity.base.TemperatureType;


/**
 * 
 *             Control Temperature: 
 *              
 *             Emergency Temperature: 
 *              
 *             Flashpoint Temperature: 
 *             The lowest temperature at which it can vaporize to form an ignitable mixture in air. 
 *             
 *             
 * <pre>
 * &lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;deprecated xmlns="http://www.w3.org/2001/XMLSchema" xmlns:fb="http://www.fixm.aero/base/4.1" xmlns:fx="http://www.fixm.aero/flight/4.1" xmlns:xs="http://www.w3.org/2001/XMLSchema"&gt;&lt;deletionVersion&gt;5.0.0&lt;/deletionVersion&gt;&lt;deprecationVersion&gt;4.1.0&lt;/deprecationVersion&gt;&lt;rationale&gt;Change Request #25. Outcomes of ATMRPP/2 shows DG data element other than NOTOC items are not required in FIXM Core.&lt;/rationale&gt;&lt;replacement&gt;N/A&lt;/replacement&gt;&lt;/deprecated&gt;
 * </pre>
 * 
 * 
 * <p>Java class for TemperaturesType complex type.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType name="TemperaturesType">
 *   &lt;complexContent>
 *     &lt;extension base="{http://www.fixm.aero/base/4.1}ExtensibleType">
 *       &lt;sequence>
 *         &lt;element name="controlTemperature" type="{http://www.fixm.aero/base/4.1}TemperatureType" minOccurs="0"/>
 *         &lt;element name="emergencyTemperature" type="{http://www.fixm.aero/base/4.1}TemperatureType" minOccurs="0"/>
 *         &lt;element name="flashpointTemperature" type="{http://www.fixm.aero/base/4.1}TemperatureType" minOccurs="0"/>
 *       &lt;/sequence>
 *     &lt;/extension>
 *   &lt;/complexContent>
 * &lt;/complexType>
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "TemperaturesType", propOrder = {
    "controlTemperature",
    "emergencyTemperature",
    "flashpointTemperature"
})
@Entity(name = "TemperaturesType")
@Table(name = "TEMPERATURESTYPE")
public class TemperaturesType
    extends ExtensibleType
    implements Equals, HashCode
{

    protected TemperatureType controlTemperature;
    protected TemperatureType emergencyTemperature;
    protected TemperatureType flashpointTemperature;

    /**
     * Gets the value of the controlTemperature property.
     * 
     * @return
     *     possible object is
     *     {@link TemperatureType }
     *     
     */
    @ManyToOne(targetEntity = TemperatureType.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "CONTROLTEMPERATURE_TEMPERATU_0")
    public TemperatureType getControlTemperature() {
        return controlTemperature;
    }

    /**
     * Sets the value of the controlTemperature property.
     * 
     * @param value
     *     allowed object is
     *     {@link TemperatureType }
     *     
     */
    public void setControlTemperature(TemperatureType value) {
        this.controlTemperature = value;
    }

    /**
     * Gets the value of the emergencyTemperature property.
     * 
     * @return
     *     possible object is
     *     {@link TemperatureType }
     *     
     */
    @ManyToOne(targetEntity = TemperatureType.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "EMERGENCYTEMPERATURE_TEMPERA_0")
    public TemperatureType getEmergencyTemperature() {
        return emergencyTemperature;
    }

    /**
     * Sets the value of the emergencyTemperature property.
     * 
     * @param value
     *     allowed object is
     *     {@link TemperatureType }
     *     
     */
    public void setEmergencyTemperature(TemperatureType value) {
        this.emergencyTemperature = value;
    }

    /**
     * Gets the value of the flashpointTemperature property.
     * 
     * @return
     *     possible object is
     *     {@link TemperatureType }
     *     
     */
    @ManyToOne(targetEntity = TemperatureType.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "FLASHPOINTTEMPERATURE_TEMPER_0")
    public TemperatureType getFlashpointTemperature() {
        return flashpointTemperature;
    }

    /**
     * Sets the value of the flashpointTemperature property.
     * 
     * @param value
     *     allowed object is
     *     {@link TemperatureType }
     *     
     */
    public void setFlashpointTemperature(TemperatureType value) {
        this.flashpointTemperature = value;
    }

    public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy strategy) {
        if (!(object instanceof TemperaturesType)) {
            return false;
        }
        if (this == object) {
            return true;
        }
        if (!super.equals(thisLocator, thatLocator, object, strategy)) {
            return false;
        }
        final TemperaturesType that = ((TemperaturesType) object);
        {
            TemperatureType lhsControlTemperature;
            lhsControlTemperature = this.getControlTemperature();
            TemperatureType rhsControlTemperature;
            rhsControlTemperature = that.getControlTemperature();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "controlTemperature", lhsControlTemperature), LocatorUtils.property(thatLocator, "controlTemperature", rhsControlTemperature), lhsControlTemperature, rhsControlTemperature)) {
                return false;
            }
        }
        {
            TemperatureType lhsEmergencyTemperature;
            lhsEmergencyTemperature = this.getEmergencyTemperature();
            TemperatureType rhsEmergencyTemperature;
            rhsEmergencyTemperature = that.getEmergencyTemperature();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "emergencyTemperature", lhsEmergencyTemperature), LocatorUtils.property(thatLocator, "emergencyTemperature", rhsEmergencyTemperature), lhsEmergencyTemperature, rhsEmergencyTemperature)) {
                return false;
            }
        }
        {
            TemperatureType lhsFlashpointTemperature;
            lhsFlashpointTemperature = this.getFlashpointTemperature();
            TemperatureType rhsFlashpointTemperature;
            rhsFlashpointTemperature = that.getFlashpointTemperature();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "flashpointTemperature", lhsFlashpointTemperature), LocatorUtils.property(thatLocator, "flashpointTemperature", rhsFlashpointTemperature), lhsFlashpointTemperature, rhsFlashpointTemperature)) {
                return false;
            }
        }
        return true;
    }

    public boolean equals(Object object) {
        final EqualsStrategy strategy = JAXBEqualsStrategy.INSTANCE;
        return equals(null, null, object, strategy);
    }

    public int hashCode(ObjectLocator locator, HashCodeStrategy strategy) {
        int currentHashCode = super.hashCode(locator, strategy);
        {
            TemperatureType theControlTemperature;
            theControlTemperature = this.getControlTemperature();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "controlTemperature", theControlTemperature), currentHashCode, theControlTemperature);
        }
        {
            TemperatureType theEmergencyTemperature;
            theEmergencyTemperature = this.getEmergencyTemperature();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "emergencyTemperature", theEmergencyTemperature), currentHashCode, theEmergencyTemperature);
        }
        {
            TemperatureType theFlashpointTemperature;
            theFlashpointTemperature = this.getFlashpointTemperature();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "flashpointTemperature", theFlashpointTemperature), currentHashCode, theFlashpointTemperature);
        }
        return currentHashCode;
    }

    public int hashCode() {
        final HashCodeStrategy strategy = JAXBHashCodeStrategy.INSTANCE;
        return this.hashCode(null, strategy);
    }

}
