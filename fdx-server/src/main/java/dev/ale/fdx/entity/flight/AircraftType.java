//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.4 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2019.10.28 at 02:58:02 PM ICT 
//


package dev.ale.fdx.entity.flight;

import java.util.HashSet;
import java.util.Set;

import javax.persistence.Basic;
import javax.persistence.CascadeType;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.EnumType;
import javax.persistence.Enumerated;
import javax.persistence.FetchType;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.Table;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlAttribute;
import javax.xml.bind.annotation.XmlType;

import org.hibernate.annotations.Fetch;
import org.hibernate.annotations.FetchMode;
import org.hibernate.annotations.LazyCollection;
import org.hibernate.annotations.LazyCollectionOption;
import org.jvnet.jaxb2_commons.lang.Equals;
import org.jvnet.jaxb2_commons.lang.EqualsStrategy;
import org.jvnet.jaxb2_commons.lang.HashCode;
import org.jvnet.jaxb2_commons.lang.HashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBEqualsStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBHashCodeStrategy;
import org.jvnet.jaxb2_commons.locator.ObjectLocator;
import org.jvnet.jaxb2_commons.locator.util.LocatorUtils;

import dev.ale.fdx.entity.base.ColourChoiceType;
import dev.ale.fdx.entity.base.ExtensibleType;


/**
 * 
 *             Aircraft enabling the flight. [FIXM] 
 *          
 * 
 * <p>Java class for AircraftType complex type.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType name="AircraftType">
 *   &lt;complexContent>
 *     &lt;extension base="{http://www.fixm.aero/base/4.1}ExtensibleType">
 *       &lt;sequence>
 *         &lt;element name="aircraftColours" type="{http://www.fixm.aero/base/4.1}ColourChoiceType" minOccurs="0"/>
 *         &lt;element name="aircraftType" type="{http://www.fixm.aero/flight/4.1}AircraftTypeType" maxOccurs="2000" minOccurs="0"/>
 *         &lt;element name="capabilities" type="{http://www.fixm.aero/flight/4.1}FlightCapabilitiesType" minOccurs="0"/>
 *       &lt;/sequence>
 *       &lt;attribute name="aircraftAddress" type="{http://www.fixm.aero/flight/4.1}AircraftAddressType" />
 *       &lt;attribute name="aircraftApproachCategory" type="{http://www.fixm.aero/flight/4.1}AircraftApproachCategoryType" />
 *       &lt;attribute name="numberOfAircraft">
 *         &lt;simpleType>
 *           &lt;restriction base="{http://www.fixm.aero/base/4.1}CountType">
 *             &lt;minInclusive value="2"/>
 *           &lt;/restriction>
 *         &lt;/simpleType>
 *       &lt;/attribute>
 *       &lt;attribute name="registration" type="{http://www.fixm.aero/flight/4.1}AircraftRegistrationType" />
 *       &lt;attribute name="significantMarkings" type="{http://www.fixm.aero/base/4.1}CharacterStringType" />
 *       &lt;attribute name="wakeTurbulence" type="{http://www.fixm.aero/flight/4.1}WakeTurbulenceCategoryType" />
 *     &lt;/extension>
 *   &lt;/complexContent>
 * &lt;/complexType>
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "AircraftType", propOrder = {
    "aircraftColours",
    "aircraftType",
    "capabilities"
})
@Entity(name = "AircraftType")
@Table(name = "AIRCRAFTTYPE")
public class AircraftType
    extends ExtensibleType
    implements Equals, HashCode
{

    protected ColourChoiceType aircraftColours;
    protected Set<AircraftTypeType> aircraftType;
    protected FlightCapabilitiesType capabilities;
    @XmlAttribute(name = "aircraftAddress")
    protected String aircraftAddress;
    @XmlAttribute(name = "aircraftApproachCategory")
    protected AircraftApproachCategoryType aircraftApproachCategory;
    @XmlAttribute(name = "numberOfAircraft")
    protected Integer numberOfAircraft;
    @XmlAttribute(name = "registration")
    protected String registration;
    @XmlAttribute(name = "significantMarkings")
    protected String significantMarkings;
    @XmlAttribute(name = "wakeTurbulence")
    protected WakeTurbulenceCategoryType wakeTurbulence;

    /**
     * Gets the value of the aircraftColours property.
     * 
     * @return
     *     possible object is
     *     {@link ColourChoiceType }
     *     
     */
    @ManyToOne(targetEntity = ColourChoiceType.class, cascade = {
        CascadeType.ALL
    }
    , fetch = FetchType.EAGER
    		)
    @JoinColumn(name = "AIRCRAFTCOLOURS_AIRCRAFTTYPE_0")
    public ColourChoiceType getAircraftColours() {
        return aircraftColours;
    }

    /**
     * Sets the value of the aircraftColours property.
     * 
     * @param value
     *     allowed object is
     *     {@link ColourChoiceType }
     *     
     */
    public void setAircraftColours(ColourChoiceType value) {
        this.aircraftColours = value;
    }

    /**
     * Gets the value of the aircraftType property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the aircraftType property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getAircraftType().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link AircraftTypeType }
     * 
     * 
     */
    @OneToMany(targetEntity = AircraftTypeType.class, cascade = {
        CascadeType.ALL
    }
    , fetch = FetchType.LAZY
    		)
    @JoinColumn(name = "AIRCRAFTTYPE_AIRCRAFTTYPE_HJ_0")
    @LazyCollection(LazyCollectionOption.FALSE)
    public Set<AircraftTypeType> getAircraftType() {
        if (aircraftType == null) {
            aircraftType = new HashSet<AircraftTypeType>();
        }
        return this.aircraftType;
    }

    /**
     * 
     * 
     */
    public void setAircraftType(Set<AircraftTypeType> aircraftType) {
        this.aircraftType = aircraftType;
    }

    /**
     * Gets the value of the capabilities property.
     * 
     * @return
     *     possible object is
     *     {@link FlightCapabilitiesType }
     *     
     */
    @ManyToOne(targetEntity = FlightCapabilitiesType.class, cascade = {
        CascadeType.ALL
    }
    , fetch = FetchType.LAZY
    		)
    @JoinColumn(name = "CAPABILITIES_AIRCRAFTTYPE_HJ_0")
    public FlightCapabilitiesType getCapabilities() {
        return capabilities;
    }

    /**
     * Sets the value of the capabilities property.
     * 
     * @param value
     *     allowed object is
     *     {@link FlightCapabilitiesType }
     *     
     */
    public void setCapabilities(FlightCapabilitiesType value) {
        this.capabilities = value;
    }

    /**
     * Gets the value of the aircraftAddress property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    @Basic
    @Column(name = "AIRCRAFTADDRESS", length = 4096)
    public String getAircraftAddress() {
        return aircraftAddress;
    }

    /**
     * Sets the value of the aircraftAddress property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setAircraftAddress(String value) {
        this.aircraftAddress = value;
    }

    /**
     * Gets the value of the aircraftApproachCategory property.
     * 
     * @return
     *     possible object is
     *     {@link AircraftApproachCategoryType }
     *     
     */
    @Basic
    @Column(name = "AIRCRAFTAPPROACHCATEGORY", length = 255)
    @Enumerated(EnumType.STRING)
    public AircraftApproachCategoryType getAircraftApproachCategory() {
        return aircraftApproachCategory;
    }

    /**
     * Sets the value of the aircraftApproachCategory property.
     * 
     * @param value
     *     allowed object is
     *     {@link AircraftApproachCategoryType }
     *     
     */
    public void setAircraftApproachCategory(AircraftApproachCategoryType value) {
        this.aircraftApproachCategory = value;
    }

    /**
     * Gets the value of the numberOfAircraft property.
     * 
     * @return
     *     possible object is
     *     {@link Integer }
     *     
     */
    @Basic
    @Column(name = "NUMBEROFAIRCRAFT", scale = 0)
    public Integer getNumberOfAircraft() {
        return numberOfAircraft;
    }

    /**
     * Sets the value of the numberOfAircraft property.
     * 
     * @param value
     *     allowed object is
     *     {@link Integer }
     *     
     */
    public void setNumberOfAircraft(Integer value) {
        this.numberOfAircraft = value;
    }

    /**
     * Gets the value of the registration property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    @Basic
    @Column(name = "REGISTRATION", length = 4096)
    public String getRegistration() {
        return registration;
    }

    /**
     * Sets the value of the registration property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setRegistration(String value) {
        this.registration = value;
    }

    /**
     * Gets the value of the significantMarkings property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    @Basic
    @Column(name = "SIGNIFICANTMARKINGS", length = 4096)
    public String getSignificantMarkings() {
        return significantMarkings;
    }

    /**
     * Sets the value of the significantMarkings property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setSignificantMarkings(String value) {
        this.significantMarkings = value;
    }

    /**
     * Gets the value of the wakeTurbulence property.
     * 
     * @return
     *     possible object is
     *     {@link WakeTurbulenceCategoryType }
     *     
     */
    @Basic
    @Column(name = "WAKETURBULENCE", length = 255)
    @Enumerated(EnumType.STRING)
    public WakeTurbulenceCategoryType getWakeTurbulence() {
        return wakeTurbulence;
    }

    /**
     * Sets the value of the wakeTurbulence property.
     * 
     * @param value
     *     allowed object is
     *     {@link WakeTurbulenceCategoryType }
     *     
     */
    public void setWakeTurbulence(WakeTurbulenceCategoryType value) {
        this.wakeTurbulence = value;
    }

    public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy strategy) {
        if (!(object instanceof AircraftType)) {
            return false;
        }
        if (this == object) {
            return true;
        }
        if (!super.equals(thisLocator, thatLocator, object, strategy)) {
            return false;
        }
        final AircraftType that = ((AircraftType) object);
        {
            ColourChoiceType lhsAircraftColours;
            lhsAircraftColours = this.getAircraftColours();
            ColourChoiceType rhsAircraftColours;
            rhsAircraftColours = that.getAircraftColours();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "aircraftColours", lhsAircraftColours), LocatorUtils.property(thatLocator, "aircraftColours", rhsAircraftColours), lhsAircraftColours, rhsAircraftColours)) {
                return false;
            }
        }
        {
            Set<AircraftTypeType> lhsAircraftType;
            lhsAircraftType = (((this.aircraftType!= null)&&(!this.aircraftType.isEmpty()))?this.getAircraftType():null);
            Set<AircraftTypeType> rhsAircraftType;
            rhsAircraftType = (((that.aircraftType!= null)&&(!that.aircraftType.isEmpty()))?that.getAircraftType():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "aircraftType", lhsAircraftType), LocatorUtils.property(thatLocator, "aircraftType", rhsAircraftType), lhsAircraftType, rhsAircraftType)) {
                return false;
            }
        }
        {
            FlightCapabilitiesType lhsCapabilities;
            lhsCapabilities = this.getCapabilities();
            FlightCapabilitiesType rhsCapabilities;
            rhsCapabilities = that.getCapabilities();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "capabilities", lhsCapabilities), LocatorUtils.property(thatLocator, "capabilities", rhsCapabilities), lhsCapabilities, rhsCapabilities)) {
                return false;
            }
        }
        {
            String lhsAircraftAddress;
            lhsAircraftAddress = this.getAircraftAddress();
            String rhsAircraftAddress;
            rhsAircraftAddress = that.getAircraftAddress();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "aircraftAddress", lhsAircraftAddress), LocatorUtils.property(thatLocator, "aircraftAddress", rhsAircraftAddress), lhsAircraftAddress, rhsAircraftAddress)) {
                return false;
            }
        }
        {
            AircraftApproachCategoryType lhsAircraftApproachCategory;
            lhsAircraftApproachCategory = this.getAircraftApproachCategory();
            AircraftApproachCategoryType rhsAircraftApproachCategory;
            rhsAircraftApproachCategory = that.getAircraftApproachCategory();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "aircraftApproachCategory", lhsAircraftApproachCategory), LocatorUtils.property(thatLocator, "aircraftApproachCategory", rhsAircraftApproachCategory), lhsAircraftApproachCategory, rhsAircraftApproachCategory)) {
                return false;
            }
        }
        {
            Integer lhsNumberOfAircraft;
            lhsNumberOfAircraft = this.getNumberOfAircraft();
            Integer rhsNumberOfAircraft;
            rhsNumberOfAircraft = that.getNumberOfAircraft();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "numberOfAircraft", lhsNumberOfAircraft), LocatorUtils.property(thatLocator, "numberOfAircraft", rhsNumberOfAircraft), lhsNumberOfAircraft, rhsNumberOfAircraft)) {
                return false;
            }
        }
        {
            String lhsRegistration;
            lhsRegistration = this.getRegistration();
            String rhsRegistration;
            rhsRegistration = that.getRegistration();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "registration", lhsRegistration), LocatorUtils.property(thatLocator, "registration", rhsRegistration), lhsRegistration, rhsRegistration)) {
                return false;
            }
        }
        {
            String lhsSignificantMarkings;
            lhsSignificantMarkings = this.getSignificantMarkings();
            String rhsSignificantMarkings;
            rhsSignificantMarkings = that.getSignificantMarkings();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "significantMarkings", lhsSignificantMarkings), LocatorUtils.property(thatLocator, "significantMarkings", rhsSignificantMarkings), lhsSignificantMarkings, rhsSignificantMarkings)) {
                return false;
            }
        }
        {
            WakeTurbulenceCategoryType lhsWakeTurbulence;
            lhsWakeTurbulence = this.getWakeTurbulence();
            WakeTurbulenceCategoryType rhsWakeTurbulence;
            rhsWakeTurbulence = that.getWakeTurbulence();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "wakeTurbulence", lhsWakeTurbulence), LocatorUtils.property(thatLocator, "wakeTurbulence", rhsWakeTurbulence), lhsWakeTurbulence, rhsWakeTurbulence)) {
                return false;
            }
        }
        return true;
    }

    public boolean equals(Object object) {
        final EqualsStrategy strategy = JAXBEqualsStrategy.INSTANCE;
        return equals(null, null, object, strategy);
    }

    public int hashCode(ObjectLocator locator, HashCodeStrategy strategy) {
        int currentHashCode = super.hashCode(locator, strategy);
        {
            ColourChoiceType theAircraftColours;
            theAircraftColours = this.getAircraftColours();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "aircraftColours", theAircraftColours), currentHashCode, theAircraftColours);
        }
        {
            Set<AircraftTypeType> theAircraftType;
            theAircraftType = (((this.aircraftType!= null)&&(!this.aircraftType.isEmpty()))?this.getAircraftType():null);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "aircraftType", theAircraftType), currentHashCode, theAircraftType);
        }
        {
            FlightCapabilitiesType theCapabilities;
            theCapabilities = this.getCapabilities();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "capabilities", theCapabilities), currentHashCode, theCapabilities);
        }
        {
            String theAircraftAddress;
            theAircraftAddress = this.getAircraftAddress();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "aircraftAddress", theAircraftAddress), currentHashCode, theAircraftAddress);
        }
        {
            AircraftApproachCategoryType theAircraftApproachCategory;
            theAircraftApproachCategory = this.getAircraftApproachCategory();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "aircraftApproachCategory", theAircraftApproachCategory), currentHashCode, theAircraftApproachCategory);
        }
        {
            Integer theNumberOfAircraft;
            theNumberOfAircraft = this.getNumberOfAircraft();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "numberOfAircraft", theNumberOfAircraft), currentHashCode, theNumberOfAircraft);
        }
        {
            String theRegistration;
            theRegistration = this.getRegistration();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "registration", theRegistration), currentHashCode, theRegistration);
        }
        {
            String theSignificantMarkings;
            theSignificantMarkings = this.getSignificantMarkings();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "significantMarkings", theSignificantMarkings), currentHashCode, theSignificantMarkings);
        }
        {
            WakeTurbulenceCategoryType theWakeTurbulence;
            theWakeTurbulence = this.getWakeTurbulence();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "wakeTurbulence", theWakeTurbulence), currentHashCode, theWakeTurbulence);
        }
        return currentHashCode;
    }

    public int hashCode() {
        final HashCodeStrategy strategy = JAXBHashCodeStrategy.INSTANCE;
        return this.hashCode(null, strategy);
    }

}
