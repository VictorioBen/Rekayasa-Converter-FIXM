//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.4 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2019.10.28 at 02:58:02 PM ICT 
//


package dev.ale.fdx.entity.flight;

import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import java.util.Set;

import javax.persistence.Basic;
import javax.persistence.CascadeType;
import javax.persistence.CollectionTable;
import javax.persistence.Column;
import javax.persistence.ElementCollection;
import javax.persistence.Entity;
import javax.persistence.EnumType;
import javax.persistence.Enumerated;
import javax.persistence.FetchType;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.OrderColumn;
import javax.persistence.Table;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlAttribute;
import javax.xml.bind.annotation.XmlList;
import javax.xml.bind.annotation.XmlRootElement;
import javax.xml.bind.annotation.XmlType;

import org.hibernate.annotations.LazyCollection;
import org.hibernate.annotations.LazyCollectionOption;
import org.jvnet.jaxb2_commons.lang.Equals;
import org.jvnet.jaxb2_commons.lang.EqualsStrategy;
import org.jvnet.jaxb2_commons.lang.HashCode;
import org.jvnet.jaxb2_commons.lang.HashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBEqualsStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBHashCodeStrategy;
import org.jvnet.jaxb2_commons.locator.ObjectLocator;
import org.jvnet.jaxb2_commons.locator.util.LocatorUtils;

import dev.ale.fdx.entity.base.AircraftOperatorType;
import dev.ale.fdx.entity.base.ExtensibleType;
import dev.ale.fdx.entity.base.ExtensionType;
import dev.ale.fdx.entity.base.GloballyUniqueFlightIdentifierType;
import dev.ale.fdx.entity.base.PersonOrOrganizationType;


/**
 * 
 *             This is the central object of the FIXM Logical Model. It groups all information about 
 *             the flight. [FIXM] 
 *          
 * 
 * <p>Java class for FlightType complex type.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType name="FlightType">
 *   &lt;complexContent>
 *     &lt;extension base="{http://www.fixm.aero/base/4.1}ExtensibleType">
 *       &lt;sequence>
 *         &lt;element name="agreed" type="{http://www.fixm.aero/flight/4.1}RouteTrajectoryType" minOccurs="0"/>
 *         &lt;element name="aircraft" type="{http://www.fixm.aero/flight/4.1}AircraftType" minOccurs="0"/>
 *         &lt;element name="arrival" type="{http://www.fixm.aero/flight/4.1}ArrivalType" minOccurs="0"/>
 *         &lt;element name="current" type="{http://www.fixm.aero/flight/4.1}RouteTrajectoryType" minOccurs="0"/>
 *         &lt;element name="dangerousGoods" type="{http://www.fixm.aero/flight/4.1}DangerousGoodsType" maxOccurs="2000" minOccurs="0"/>
 *         &lt;element name="departure" type="{http://www.fixm.aero/flight/4.1}DepartureType" minOccurs="0"/>
 *         &lt;element name="desired" type="{http://www.fixm.aero/flight/4.1}RankedTrajectoryType" minOccurs="0"/>
 *         &lt;element name="destination" type="{http://www.fixm.aero/flight/4.1}DestinationType" minOccurs="0"/>
 *         &lt;element name="emergency" type="{http://www.fixm.aero/flight/4.1}FlightEmergencyType" minOccurs="0"/>
 *         &lt;element name="enRoute" type="{http://www.fixm.aero/flight/4.1}EnRouteType" minOccurs="0"/>
 *         &lt;element name="extensions" type="{http://www.fixm.aero/base/4.1}ExtensionType" maxOccurs="2000" minOccurs="0"/>
 *         &lt;element name="filed" type="{http://www.fixm.aero/flight/4.1}RouteTrajectoryType" minOccurs="0"/>
 *         &lt;element name="flightIdentification" type="{http://www.fixm.aero/flight/4.1}FlightIdentificationType" minOccurs="0"/>
 *         &lt;element name="flightPlanOriginator" type="{http://www.fixm.aero/base/4.1}PersonOrOrganizationType" minOccurs="0"/>
 *         &lt;element name="flightPlanSubmitter" type="{http://www.fixm.aero/base/4.1}PersonOrOrganizationType" minOccurs="0"/>
 *         &lt;element name="gufi" type="{http://www.fixm.aero/base/4.1}GloballyUniqueFlightIdentifierType" minOccurs="0"/>
 *         &lt;element name="gufiOriginator" type="{http://www.fixm.aero/base/4.1}PersonOrOrganizationType" minOccurs="0"/>
 *         &lt;element name="negotiating" type="{http://www.fixm.aero/flight/4.1}RouteTrajectoryType" minOccurs="0"/>
 *         &lt;element name="operator" type="{http://www.fixm.aero/base/4.1}AircraftOperatorType" minOccurs="0"/>
 *         &lt;element name="radioCommunicationFailure" type="{http://www.fixm.aero/flight/4.1}RadioCommunicationFailureType" minOccurs="0"/>
 *         &lt;element name="rankedTrajectories" type="{http://www.fixm.aero/flight/4.1}RankedTrajectoryType" maxOccurs="2000" minOccurs="0"/>
 *         &lt;element name="specialHandling" minOccurs="0">
 *           &lt;simpleType>
 *             &lt;list itemType="{http://www.fixm.aero/flight/4.1}SpecialHandlingReasonCodeType" />
 *           &lt;/simpleType>
 *         &lt;/element>
 *         &lt;element name="supplementaryData" type="{http://www.fixm.aero/flight/4.1}SupplementaryDataType" minOccurs="0"/>
 *       &lt;/sequence>
 *       &lt;attribute name="flightType" type="{http://www.fixm.aero/flight/4.1}TypeOfFlightType" />
 *       &lt;attribute name="remarks" type="{http://www.fixm.aero/base/4.1}CharacterStringType" />
 *     &lt;/extension>
 *   &lt;/complexContent>
 * &lt;/complexType>
 * </pre>
 * 
 * 
 */
@XmlRootElement(name = "Flight")
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "FlightType", propOrder = {
		"agreed",
		"aircraft",
		"arrival",
		"current",
		"dangerousGoods",
		"departure",
		"desired",
		"destination",
		"emergency",
		"enRoute",
		"extensions",
		"filed",
		"flightIdentification",
		"flightPlanOriginator",
		"flightPlanSubmitter",
		"gufi",
		"gufiOriginator",
		"negotiating",
		"operator",
		"radioCommunicationFailure",
		"rankedTrajectories",
		"specialHandling",
		"supplementaryData"
})
@Entity(name = "FlightType")
@Table(name = "FLIGHTTYPE")
public class FlightType
extends ExtensibleType
implements Equals, HashCode
{

	protected RouteTrajectoryType agreed;
	protected AircraftType aircraft;
	protected ArrivalType arrival;
	protected RouteTrajectoryType current;
	protected Set<DangerousGoodsType> dangerousGoods;
	protected DepartureType departure;
	protected RankedTrajectoryType desired;
	protected DestinationType destination;
	protected FlightEmergencyType emergency;
	protected EnRouteType enRoute;
	protected Set<ExtensionType> extensions;
	protected RouteTrajectoryType filed;
	protected FlightIdentificationType flightIdentification;
	protected PersonOrOrganizationType flightPlanOriginator;
	protected PersonOrOrganizationType flightPlanSubmitter;
	protected GloballyUniqueFlightIdentifierType gufi;
	protected PersonOrOrganizationType gufiOriginator;
	protected RouteTrajectoryType negotiating;
	protected AircraftOperatorType operator;
	protected RadioCommunicationFailureType radioCommunicationFailure;
	protected Set<RankedTrajectoryType> rankedTrajectories;
	@XmlList
	protected List<SpecialHandlingReasonCodeType> specialHandling;
	protected SupplementaryDataType supplementaryData;
	@XmlAttribute(name = "flightType")
	protected TypeOfFlightType flightType;
	@XmlAttribute(name = "remarks")
	protected String remarks;

	/**
	 * Gets the value of the agreed property.
	 * 
	 * @return
	 *     possible object is
	 *     {@link RouteTrajectoryType }
	 *     
	 */
	@ManyToOne(targetEntity = RouteTrajectoryType.class, 
			cascade = {CascadeType.ALL}
	,fetch = FetchType.LAZY
			)
	@JoinColumn(name = "AGREED_FLIGHTTYPE_HJID")
	public RouteTrajectoryType getAgreed() {
		return agreed;
	}

	/**
	 * Sets the value of the agreed property.
	 * 
	 * @param value
	 *     allowed object is
	 *     {@link RouteTrajectoryType }
	 *     
	 */
	public void setAgreed(RouteTrajectoryType value) {
		this.agreed = value;
	}

	/**
	 * Gets the value of the aircraft property.
	 * 
	 * @return
	 *     possible object is
	 *     {@link AircraftType }
	 *     
	 */
	@ManyToOne(targetEntity = AircraftType.class, 
			cascade = {CascadeType.ALL}
	,
	fetch = FetchType.EAGER
			)
	@JoinColumn(name = "AIRCRAFT_FLIGHTTYPE_HJID")
	public AircraftType getAircraft() {
		return aircraft;
	}

	/**
	 * Sets the value of the aircraft property.
	 * 
	 * @param value
	 *     allowed object is
	 *     {@link AircraftType }
	 *     
	 */
	public void setAircraft(AircraftType value) {
		this.aircraft = value;
	}

	/**
	 * Gets the value of the arrival property.
	 * 
	 * @return
	 *     possible object is
	 *     {@link ArrivalType }
	 *     
	 */
	@ManyToOne(targetEntity = ArrivalType.class, 
			cascade = {CascadeType.ALL}
	,
	fetch = FetchType.LAZY
			)
	@JoinColumn(name = "ARRIVAL_FLIGHTTYPE_HJID")
	public ArrivalType getArrival() {
		return arrival;
	}

	/**
	 * Sets the value of the arrival property.
	 * 
	 * @param value
	 *     allowed object is
	 *     {@link ArrivalType }
	 *     
	 */
	public void setArrival(ArrivalType value) {
		this.arrival = value;
	}

	/**
	 * Gets the value of the current property.
	 * 
	 * @return
	 *     possible object is
	 *     {@link RouteTrajectoryType }
	 *     
	 */
	@ManyToOne(targetEntity = RouteTrajectoryType.class, 
			cascade = {CascadeType.ALL}
	,
	fetch = FetchType.LAZY
			)
	@JoinColumn(name = "CURRENT__FLIGHTTYPE_HJID")
	public RouteTrajectoryType getCurrent() {
		return current;
	}

	/**
	 * Sets the value of the current property.
	 * 
	 * @param value
	 *     allowed object is
	 *     {@link RouteTrajectoryType }
	 *     
	 */
	public void setCurrent(RouteTrajectoryType value) {
		this.current = value;
	}

	/**
	 * Gets the value of the dangerousGoods property.
	 * 
	 * <p>
	 * This accessor method returns a reference to the live list,
	 * not a snapshot. Therefore any modification you make to the
	 * returned list will be present inside the JAXB object.
	 * This is why there is not a <CODE>set</CODE> method for the dangerousGoods property.
	 * 
	 * <p>
	 * For example, to add a new item, do as follows:
	 * <pre>
	 *    getDangerousGoods().add(newItem);
	 * </pre>
	 * 
	 * 
	 * <p>
	 * Objects of the following type(s) are allowed in the list
	 * {@link DangerousGoodsType }
	 * 
	 * 
	 */
	@OneToMany(targetEntity = DangerousGoodsType.class, 
			cascade = {CascadeType.ALL}
	//	, mappedBy = "FlightType"
	, fetch = FetchType.LAZY
			)
	@JoinColumn(name = "DANGEROUSGOODS_FLIGHTTYPE_HJ_0")
	@LazyCollection(LazyCollectionOption.FALSE)
	public Set<DangerousGoodsType> getDangerousGoods() {
		if (dangerousGoods == null) {
			dangerousGoods = new HashSet<DangerousGoodsType>();
		}
		return this.dangerousGoods;
	}

	/**
	 * 
	 * 
	 */
	public void setDangerousGoods(Set<DangerousGoodsType> dangerousGoods) {
		this.dangerousGoods = dangerousGoods;
	}

	/**
	 * Gets the value of the departure property.
	 * 
	 * @return
	 *     possible object is
	 *     {@link DepartureType }
	 *     
	 */
	@ManyToOne(targetEntity = DepartureType.class, 
			cascade = {CascadeType.ALL}
	,
	fetch = FetchType.LAZY
			)
	@JoinColumn(name = "DEPARTURE_FLIGHTTYPE_HJID")
	public DepartureType getDeparture() {
		return departure;
	}

	/**
	 * Sets the value of the departure property.
	 * 
	 * @param value
	 *     allowed object is
	 *     {@link DepartureType }
	 *     
	 */
	public void setDeparture(DepartureType value) {
		this.departure = value;
	}

	/**
	 * Gets the value of the desired property.
	 * 
	 * @return
	 *     possible object is
	 *     {@link RankedTrajectoryType }
	 *     
	 */
	@ManyToOne(targetEntity = RankedTrajectoryType.class, 
			cascade = {CascadeType.ALL}
	,
	fetch = FetchType.LAZY
			)
	@JoinColumn(name = "DESIRED_FLIGHTTYPE_HJID")
	public RankedTrajectoryType getDesired() {
		return desired;
	}

	/**
	 * Sets the value of the desired property.
	 * 
	 * @param value
	 *     allowed object is
	 *     {@link RankedTrajectoryType }
	 *     
	 */
	public void setDesired(RankedTrajectoryType value) {
		this.desired = value;
	}

	/**
	 * Gets the value of the destination property.
	 * 
	 * @return
	 *     possible object is
	 *     {@link DestinationType }
	 *     
	 */
	@ManyToOne(targetEntity = DestinationType.class, 
			cascade = {CascadeType.ALL}
	,
	fetch = FetchType.LAZY
			)
	@JoinColumn(name = "DESTINATION_FLIGHTTYPE_HJID")
	public DestinationType getDestination() {
		return destination;
	}

	/**
	 * Sets the value of the destination property.
	 * 
	 * @param value
	 *     allowed object is
	 *     {@link DestinationType }
	 *     
	 */
	public void setDestination(DestinationType value) {
		this.destination = value;
	}

	/**
	 * Gets the value of the emergency property.
	 * 
	 * @return
	 *     possible object is
	 *     {@link FlightEmergencyType }
	 *     
	 */
	@ManyToOne(targetEntity = FlightEmergencyType.class, 
			cascade = {CascadeType.ALL}
	,
	fetch = FetchType.LAZY
			)
	@JoinColumn(name = "EMERGENCY_FLIGHTTYPE_HJID")
	public FlightEmergencyType getEmergency() {
		return emergency;
	}

	/**
	 * Sets the value of the emergency property.
	 * 
	 * @param value
	 *     allowed object is
	 *     {@link FlightEmergencyType }
	 *     
	 */
	public void setEmergency(FlightEmergencyType value) {
		this.emergency = value;
	}

	/**
	 * Gets the value of the enRoute property.
	 * 
	 * @return
	 *     possible object is
	 *     {@link EnRouteType }
	 *     
	 */
	@ManyToOne(targetEntity = EnRouteType.class, 
			cascade = {CascadeType.ALL}
	,
	fetch = FetchType.LAZY
			)
	@JoinColumn(name = "ENROUTE_FLIGHTTYPE_HJID")
	public EnRouteType getEnRoute() {
		return enRoute;
	}

	/**
	 * Sets the value of the enRoute property.
	 * 
	 * @param value
	 *     allowed object is
	 *     {@link EnRouteType }
	 *     
	 */
	public void setEnRoute(EnRouteType value) {
		this.enRoute = value;
	}

	/**
	 * Gets the value of the extensions property.
	 * 
	 * <p>
	 * This accessor method returns a reference to the live list,
	 * not a snapshot. Therefore any modification you make to the
	 * returned list will be present inside the JAXB object.
	 * This is why there is not a <CODE>set</CODE> method for the extensions property.
	 * 
	 * <p>
	 * For example, to add a new item, do as follows:
	 * <pre>
	 *    getExtensions().add(newItem);
	 * </pre>
	 * 
	 * 
	 * <p>
	 * Objects of the following type(s) are allowed in the list
	 * {@link ExtensionType }
	 * 
	 * 
	 */
	@OneToMany(targetEntity = ExtensionType.class, 
			cascade = {CascadeType.ALL}
	//	, mappedBy = "flight"
	, fetch = FetchType.LAZY
			)
	@JoinColumn(name = "EXTENSIONS_FLIGHTTYPE_HJID")
	//    @Fetch(value = FetchMode.SUBSELECT)
	@LazyCollection(LazyCollectionOption.FALSE)
	public Set<ExtensionType> getExtensions() {
		if (extensions == null) {
			//            extensions = new ArrayList<ExtensionType>();
			extensions = new HashSet<ExtensionType>();
		}
		return this.extensions;
	}

	/**
	 * 
	 * 
	 */
	public void setExtensions(Set<ExtensionType> extensions) {
		this.extensions = extensions;
	}

	/**
	 * Gets the value of the filed property.
	 * 
	 * @return
	 *     possible object is
	 *     {@link RouteTrajectoryType }
	 *     
	 */
	@ManyToOne(targetEntity = RouteTrajectoryType.class, 
			cascade = {CascadeType.ALL}
	,
	fetch = FetchType.LAZY
			)
	@JoinColumn(name = "FILED_FLIGHTTYPE_HJID")
	public RouteTrajectoryType getFiled() {
		return filed;
	}

	/**
	 * Sets the value of the filed property.
	 * 
	 * @param value
	 *     allowed object is
	 *     {@link RouteTrajectoryType }
	 *     
	 */
	public void setFiled(RouteTrajectoryType value) {
		this.filed = value;
	}

	/**
	 * Gets the value of the flightIdentification property.
	 * 
	 * @return
	 *     possible object is
	 *     {@link FlightIdentificationType }
	 *     
	 */
	@ManyToOne(targetEntity = FlightIdentificationType.class, 
			cascade = {CascadeType.ALL}
	,
	fetch = FetchType.LAZY
			)
	@JoinColumn(name = "FLIGHTIDENTIFICATION_FLIGHTT_0")
	public FlightIdentificationType getFlightIdentification() {
		return flightIdentification;
	}

	/**
	 * Sets the value of the flightIdentification property.
	 * 
	 * @param value
	 *     allowed object is
	 *     {@link FlightIdentificationType }
	 *     
	 */
	public void setFlightIdentification(FlightIdentificationType value) {
		this.flightIdentification = value;
	}

	/**
	 * Gets the value of the flightPlanOriginator property.
	 * 
	 * @return
	 *     possible object is
	 *     {@link PersonOrOrganizationType }
	 *     
	 */
	@ManyToOne(targetEntity = PersonOrOrganizationType.class, 
			cascade = {CascadeType.ALL}
	,
	fetch = FetchType.LAZY
			)
	@JoinColumn(name = "FLIGHTPLANORIGINATOR_FLIGHTT_0")
	public PersonOrOrganizationType getFlightPlanOriginator() {
		return flightPlanOriginator;
	}

	/**
	 * Sets the value of the flightPlanOriginator property.
	 * 
	 * @param value
	 *     allowed object is
	 *     {@link PersonOrOrganizationType }
	 *     
	 */
	public void setFlightPlanOriginator(PersonOrOrganizationType value) {
		this.flightPlanOriginator = value;
	}

	/**
	 * Gets the value of the flightPlanSubmitter property.
	 * 
	 * @return
	 *     possible object is
	 *     {@link PersonOrOrganizationType }
	 *     
	 */
	@ManyToOne(targetEntity = PersonOrOrganizationType.class, 
			cascade = {CascadeType.ALL}
	,
	fetch = FetchType.LAZY
			)
	@JoinColumn(name = "FLIGHTPLANSUBMITTER_FLIGHTTY_0")
	public PersonOrOrganizationType getFlightPlanSubmitter() {
		return flightPlanSubmitter;
	}

	/**
	 * Sets the value of the flightPlanSubmitter property.
	 * 
	 * @param value
	 *     allowed object is
	 *     {@link PersonOrOrganizationType }
	 *     
	 */
	public void setFlightPlanSubmitter(PersonOrOrganizationType value) {
		this.flightPlanSubmitter = value;
	}

	/**
	 * Gets the value of the gufi property.
	 * 
	 * @return
	 *     possible object is
	 *     {@link GloballyUniqueFlightIdentifierType }
	 *     
	 */
	@ManyToOne(targetEntity = GloballyUniqueFlightIdentifierType.class, 
			cascade = {CascadeType.ALL}
	,
	fetch = FetchType.LAZY
			)
	@JoinColumn(name = "GUFI_FLIGHTTYPE_HJID")
	public GloballyUniqueFlightIdentifierType getGufi() {
		return gufi;
	}

	/**
	 * Sets the value of the gufi property.
	 * 
	 * @param value
	 *     allowed object is
	 *     {@link GloballyUniqueFlightIdentifierType }
	 *     
	 */
	public void setGufi(GloballyUniqueFlightIdentifierType value) {
		this.gufi = value;
	}

	/**
	 * Gets the value of the gufiOriginator property.
	 * 
	 * @return
	 *     possible object is
	 *     {@link PersonOrOrganizationType }
	 *     
	 */
	@ManyToOne(targetEntity = PersonOrOrganizationType.class, 
			cascade = {CascadeType.ALL}
	,
	fetch = FetchType.LAZY
			)
	@JoinColumn(name = "GUFIORIGINATOR_FLIGHTTYPE_HJ_0")
	public PersonOrOrganizationType getGufiOriginator() {
		return gufiOriginator;
	}

	/**
	 * Sets the value of the gufiOriginator property.
	 * 
	 * @param value
	 *     allowed object is
	 *     {@link PersonOrOrganizationType }
	 *     
	 */
	public void setGufiOriginator(PersonOrOrganizationType value) {
		this.gufiOriginator = value;
	}

	/**
	 * Gets the value of the negotiating property.
	 * 
	 * @return
	 *     possible object is
	 *     {@link RouteTrajectoryType }
	 *     
	 */
	@ManyToOne(targetEntity = RouteTrajectoryType.class, 
			cascade = {CascadeType.ALL}
	,
	fetch = FetchType.LAZY
			)
	@JoinColumn(name = "NEGOTIATING_FLIGHTTYPE_HJID")
	public RouteTrajectoryType getNegotiating() {
		return negotiating;
	}

	/**
	 * Sets the value of the negotiating property.
	 * 
	 * @param value
	 *     allowed object is
	 *     {@link RouteTrajectoryType }
	 *     
	 */
	public void setNegotiating(RouteTrajectoryType value) {
		this.negotiating = value;
	}

	/**
	 * Gets the value of the operator property.
	 * 
	 * @return
	 *     possible object is
	 *     {@link AircraftOperatorType }
	 *     
	 */
	@ManyToOne(targetEntity = AircraftOperatorType.class, 
			cascade = {CascadeType.ALL}
	,
	fetch = FetchType.LAZY
			)
	@JoinColumn(name = "OPERATOR__FLIGHTTYPE_HJID")
	public AircraftOperatorType getOperator() {
		return operator;
	}

	/**
	 * Sets the value of the operator property.
	 * 
	 * @param value
	 *     allowed object is
	 *     {@link AircraftOperatorType }
	 *     
	 */
	public void setOperator(AircraftOperatorType value) {
		this.operator = value;
	}

	/**
	 * Gets the value of the radioCommunicationFailure property.
	 * 
	 * @return
	 *     possible object is
	 *     {@link RadioCommunicationFailureType }
	 *     
	 */
	@ManyToOne(targetEntity = RadioCommunicationFailureType.class, 
			cascade = {CascadeType.ALL}
	,
	fetch = FetchType.LAZY
			)
	@JoinColumn(name = "RADIOCOMMUNICATIONFAILURE_FL_0")
	public RadioCommunicationFailureType getRadioCommunicationFailure() {
		return radioCommunicationFailure;
	}

	/**
	 * Sets the value of the radioCommunicationFailure property.
	 * 
	 * @param value
	 *     allowed object is
	 *     {@link RadioCommunicationFailureType }
	 *     
	 */
	public void setRadioCommunicationFailure(RadioCommunicationFailureType value) {
		this.radioCommunicationFailure = value;
	}

	/**
	 * Gets the value of the rankedTrajectories property.
	 * 
	 * <p>
	 * This accessor method returns a reference to the live list,
	 * not a snapshot. Therefore any modification you make to the
	 * returned list will be present inside the JAXB object.
	 * This is why there is not a <CODE>set</CODE> method for the rankedTrajectories property.
	 * 
	 * <p>
	 * For example, to add a new item, do as follows:
	 * <pre>
	 *    getRankedTrajectories().add(newItem);
	 * </pre>
	 * 
	 * 
	 * <p>
	 * Objects of the following type(s) are allowed in the list
	 * {@link RankedTrajectoryType }
	 * 
	 * 
	 */
	@OneToMany(targetEntity = RankedTrajectoryType.class, 
			cascade = {CascadeType.ALL}
	//	, mappedBy = "FlightType"
	, fetch = FetchType.LAZY
			)
	@JoinColumn(name = "RANKEDTRAJECTORIES_FLIGHTTYP_0")
	@LazyCollection(LazyCollectionOption.FALSE)
	public Set<RankedTrajectoryType> getRankedTrajectories() {
		if (rankedTrajectories == null) {
			rankedTrajectories = new HashSet<RankedTrajectoryType>();
		}
		return this.rankedTrajectories;
	}

	/**
	 * 
	 * 
	 */
	public void setRankedTrajectories(Set<RankedTrajectoryType> rankedTrajectories) {
		this.rankedTrajectories = rankedTrajectories;
	}

	/**
	 * Gets the value of the specialHandling property.
	 * 
	 * <p>
	 * This accessor method returns a reference to the live list,
	 * not a snapshot. Therefore any modification you make to the
	 * returned list will be present inside the JAXB object.
	 * This is why there is not a <CODE>set</CODE> method for the specialHandling property.
	 * 
	 * <p>
	 * For example, to add a new item, do as follows:
	 * <pre>
	 *    getSpecialHandling().add(newItem);
	 * </pre>
	 * 
	 * 
	 * <p>
	 * Objects of the following type(s) are allowed in the list
	 * {@link SpecialHandlingReasonCodeType }
	 * 
	 * 
	 */
	@ElementCollection
	@OrderColumn(name = "HJINDEX")
	@Column(name = "HJVALUE")
	@Enumerated(EnumType.STRING)
	@CollectionTable(name = "FLIGHTTYPE_SPECIALHANDLING", joinColumns = {
			@JoinColumn(name = "HJID")
	})
	@LazyCollection(LazyCollectionOption.FALSE)
	public List<SpecialHandlingReasonCodeType> getSpecialHandling() {
		if (specialHandling == null) {
			specialHandling = new ArrayList<SpecialHandlingReasonCodeType>();
		}
		return this.specialHandling;
	}

	/**
	 * 
	 * 
	 */
	public void setSpecialHandling(List<SpecialHandlingReasonCodeType> specialHandling) {
		this.specialHandling = specialHandling;
	}

	/**
	 * Gets the value of the supplementaryData property.
	 * 
	 * @return
	 *     possible object is
	 *     {@link SupplementaryDataType }
	 *     
	 */
	@ManyToOne(targetEntity = SupplementaryDataType.class, 
			cascade = {CascadeType.ALL}
	,
	fetch = FetchType.LAZY
			)
	@JoinColumn(name = "SUPPLEMENTARYDATA_FLIGHTTYPE_0")
	public SupplementaryDataType getSupplementaryData() {
		return supplementaryData;
	}

	/**
	 * Sets the value of the supplementaryData property.
	 * 
	 * @param value
	 *     allowed object is
	 *     {@link SupplementaryDataType }
	 *     
	 */
	public void setSupplementaryData(SupplementaryDataType value) {
		this.supplementaryData = value;
	}

	/**
	 * Gets the value of the flightType property.
	 * 
	 * @return
	 *     possible object is
	 *     {@link TypeOfFlightType }
	 *     
	 */
	@Basic
	@Column(name = "FLIGHTTYPE", length = 255)
	@Enumerated(EnumType.STRING)
	public TypeOfFlightType getFlightType() {
		return flightType;
	}

	/**
	 * Sets the value of the flightType property.
	 * 
	 * @param value
	 *     allowed object is
	 *     {@link TypeOfFlightType }
	 *     
	 */
	public void setFlightType(TypeOfFlightType value) {
		this.flightType = value;
	}

	/**
	 * Gets the value of the remarks property.
	 * 
	 * @return
	 *     possible object is
	 *     {@link String }
	 *     
	 */
	@Basic
	@Column(name = "REMARKS", length = 4096)
	public String getRemarks() {
		return remarks;
	}

	/**
	 * Sets the value of the remarks property.
	 * 
	 * @param value
	 *     allowed object is
	 *     {@link String }
	 *     
	 */
	public void setRemarks(String value) {
		this.remarks = value;
	}

	public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy strategy) {
		if (!(object instanceof FlightType)) {
			return false;
		}
		if (this == object) {
			return true;
		}
		if (!super.equals(thisLocator, thatLocator, object, strategy)) {
			return false;
		}
		final FlightType that = ((FlightType) object);
		{
			RouteTrajectoryType lhsAgreed;
			lhsAgreed = this.getAgreed();
			RouteTrajectoryType rhsAgreed;
			rhsAgreed = that.getAgreed();
			if (!strategy.equals(LocatorUtils.property(thisLocator, "agreed", lhsAgreed), LocatorUtils.property(thatLocator, "agreed", rhsAgreed), lhsAgreed, rhsAgreed)) {
				return false;
			}
		}
		{
			AircraftType lhsAircraft;
			lhsAircraft = this.getAircraft();
			AircraftType rhsAircraft;
			rhsAircraft = that.getAircraft();
			if (!strategy.equals(LocatorUtils.property(thisLocator, "aircraft", lhsAircraft), LocatorUtils.property(thatLocator, "aircraft", rhsAircraft), lhsAircraft, rhsAircraft)) {
				return false;
			}
		}
		{
			ArrivalType lhsArrival;
			lhsArrival = this.getArrival();
			ArrivalType rhsArrival;
			rhsArrival = that.getArrival();
			if (!strategy.equals(LocatorUtils.property(thisLocator, "arrival", lhsArrival), LocatorUtils.property(thatLocator, "arrival", rhsArrival), lhsArrival, rhsArrival)) {
				return false;
			}
		}
		{
			RouteTrajectoryType lhsCurrent;
			lhsCurrent = this.getCurrent();
			RouteTrajectoryType rhsCurrent;
			rhsCurrent = that.getCurrent();
			if (!strategy.equals(LocatorUtils.property(thisLocator, "current", lhsCurrent), LocatorUtils.property(thatLocator, "current", rhsCurrent), lhsCurrent, rhsCurrent)) {
				return false;
			}
		}
		{
			Set<DangerousGoodsType> lhsDangerousGoods;
			lhsDangerousGoods = (((this.dangerousGoods!= null)&&(!this.dangerousGoods.isEmpty()))?this.getDangerousGoods():null);
			Set<DangerousGoodsType> rhsDangerousGoods;
			rhsDangerousGoods = (((that.dangerousGoods!= null)&&(!that.dangerousGoods.isEmpty()))?that.getDangerousGoods():null);
			if (!strategy.equals(LocatorUtils.property(thisLocator, "dangerousGoods", lhsDangerousGoods), LocatorUtils.property(thatLocator, "dangerousGoods", rhsDangerousGoods), lhsDangerousGoods, rhsDangerousGoods)) {
				return false;
			}
		}
		{
			DepartureType lhsDeparture;
			lhsDeparture = this.getDeparture();
			DepartureType rhsDeparture;
			rhsDeparture = that.getDeparture();
			if (!strategy.equals(LocatorUtils.property(thisLocator, "departure", lhsDeparture), LocatorUtils.property(thatLocator, "departure", rhsDeparture), lhsDeparture, rhsDeparture)) {
				return false;
			}
		}
		{
			RankedTrajectoryType lhsDesired;
			lhsDesired = this.getDesired();
			RankedTrajectoryType rhsDesired;
			rhsDesired = that.getDesired();
			if (!strategy.equals(LocatorUtils.property(thisLocator, "desired", lhsDesired), LocatorUtils.property(thatLocator, "desired", rhsDesired), lhsDesired, rhsDesired)) {
				return false;
			}
		}
		{
			DestinationType lhsDestination;
			lhsDestination = this.getDestination();
			DestinationType rhsDestination;
			rhsDestination = that.getDestination();
			if (!strategy.equals(LocatorUtils.property(thisLocator, "destination", lhsDestination), LocatorUtils.property(thatLocator, "destination", rhsDestination), lhsDestination, rhsDestination)) {
				return false;
			}
		}
		{
			FlightEmergencyType lhsEmergency;
			lhsEmergency = this.getEmergency();
			FlightEmergencyType rhsEmergency;
			rhsEmergency = that.getEmergency();
			if (!strategy.equals(LocatorUtils.property(thisLocator, "emergency", lhsEmergency), LocatorUtils.property(thatLocator, "emergency", rhsEmergency), lhsEmergency, rhsEmergency)) {
				return false;
			}
		}
		{
			EnRouteType lhsEnRoute;
			lhsEnRoute = this.getEnRoute();
			EnRouteType rhsEnRoute;
			rhsEnRoute = that.getEnRoute();
			if (!strategy.equals(LocatorUtils.property(thisLocator, "enRoute", lhsEnRoute), LocatorUtils.property(thatLocator, "enRoute", rhsEnRoute), lhsEnRoute, rhsEnRoute)) {
				return false;
			}
		}
		{
			Set<ExtensionType> lhsExtensions;
			lhsExtensions = (((this.extensions!= null)&&(!this.extensions.isEmpty()))?this.getExtensions():null);
			Set<ExtensionType> rhsExtensions;
			rhsExtensions = (((that.extensions!= null)&&(!that.extensions.isEmpty()))?that.getExtensions():null);
			if (!strategy.equals(LocatorUtils.property(thisLocator, "extensions", lhsExtensions), LocatorUtils.property(thatLocator, "extensions", rhsExtensions), lhsExtensions, rhsExtensions)) {
				return false;
			}
		}
		{
			RouteTrajectoryType lhsFiled;
			lhsFiled = this.getFiled();
			RouteTrajectoryType rhsFiled;
			rhsFiled = that.getFiled();
			if (!strategy.equals(LocatorUtils.property(thisLocator, "filed", lhsFiled), LocatorUtils.property(thatLocator, "filed", rhsFiled), lhsFiled, rhsFiled)) {
				return false;
			}
		}
		{
			FlightIdentificationType lhsFlightIdentification;
			lhsFlightIdentification = this.getFlightIdentification();
			FlightIdentificationType rhsFlightIdentification;
			rhsFlightIdentification = that.getFlightIdentification();
			if (!strategy.equals(LocatorUtils.property(thisLocator, "flightIdentification", lhsFlightIdentification), LocatorUtils.property(thatLocator, "flightIdentification", rhsFlightIdentification), lhsFlightIdentification, rhsFlightIdentification)) {
				return false;
			}
		}
		{
			PersonOrOrganizationType lhsFlightPlanOriginator;
			lhsFlightPlanOriginator = this.getFlightPlanOriginator();
			PersonOrOrganizationType rhsFlightPlanOriginator;
			rhsFlightPlanOriginator = that.getFlightPlanOriginator();
			if (!strategy.equals(LocatorUtils.property(thisLocator, "flightPlanOriginator", lhsFlightPlanOriginator), LocatorUtils.property(thatLocator, "flightPlanOriginator", rhsFlightPlanOriginator), lhsFlightPlanOriginator, rhsFlightPlanOriginator)) {
				return false;
			}
		}
		{
			PersonOrOrganizationType lhsFlightPlanSubmitter;
			lhsFlightPlanSubmitter = this.getFlightPlanSubmitter();
			PersonOrOrganizationType rhsFlightPlanSubmitter;
			rhsFlightPlanSubmitter = that.getFlightPlanSubmitter();
			if (!strategy.equals(LocatorUtils.property(thisLocator, "flightPlanSubmitter", lhsFlightPlanSubmitter), LocatorUtils.property(thatLocator, "flightPlanSubmitter", rhsFlightPlanSubmitter), lhsFlightPlanSubmitter, rhsFlightPlanSubmitter)) {
				return false;
			}
		}
		{
			GloballyUniqueFlightIdentifierType lhsGufi;
			lhsGufi = this.getGufi();
			GloballyUniqueFlightIdentifierType rhsGufi;
			rhsGufi = that.getGufi();
			if (!strategy.equals(LocatorUtils.property(thisLocator, "gufi", lhsGufi), LocatorUtils.property(thatLocator, "gufi", rhsGufi), lhsGufi, rhsGufi)) {
				return false;
			}
		}
		{
			PersonOrOrganizationType lhsGufiOriginator;
			lhsGufiOriginator = this.getGufiOriginator();
			PersonOrOrganizationType rhsGufiOriginator;
			rhsGufiOriginator = that.getGufiOriginator();
			if (!strategy.equals(LocatorUtils.property(thisLocator, "gufiOriginator", lhsGufiOriginator), LocatorUtils.property(thatLocator, "gufiOriginator", rhsGufiOriginator), lhsGufiOriginator, rhsGufiOriginator)) {
				return false;
			}
		}
		{
			RouteTrajectoryType lhsNegotiating;
			lhsNegotiating = this.getNegotiating();
			RouteTrajectoryType rhsNegotiating;
			rhsNegotiating = that.getNegotiating();
			if (!strategy.equals(LocatorUtils.property(thisLocator, "negotiating", lhsNegotiating), LocatorUtils.property(thatLocator, "negotiating", rhsNegotiating), lhsNegotiating, rhsNegotiating)) {
				return false;
			}
		}
		{
			AircraftOperatorType lhsOperator;
			lhsOperator = this.getOperator();
			AircraftOperatorType rhsOperator;
			rhsOperator = that.getOperator();
			if (!strategy.equals(LocatorUtils.property(thisLocator, "operator", lhsOperator), LocatorUtils.property(thatLocator, "operator", rhsOperator), lhsOperator, rhsOperator)) {
				return false;
			}
		}
		{
			RadioCommunicationFailureType lhsRadioCommunicationFailure;
			lhsRadioCommunicationFailure = this.getRadioCommunicationFailure();
			RadioCommunicationFailureType rhsRadioCommunicationFailure;
			rhsRadioCommunicationFailure = that.getRadioCommunicationFailure();
			if (!strategy.equals(LocatorUtils.property(thisLocator, "radioCommunicationFailure", lhsRadioCommunicationFailure), LocatorUtils.property(thatLocator, "radioCommunicationFailure", rhsRadioCommunicationFailure), lhsRadioCommunicationFailure, rhsRadioCommunicationFailure)) {
				return false;
			}
		}
		{
			Set<RankedTrajectoryType> lhsRankedTrajectories;
			lhsRankedTrajectories = (((this.rankedTrajectories!= null)&&(!this.rankedTrajectories.isEmpty()))?this.getRankedTrajectories():null);
			Set<RankedTrajectoryType> rhsRankedTrajectories;
			rhsRankedTrajectories = (((that.rankedTrajectories!= null)&&(!that.rankedTrajectories.isEmpty()))?that.getRankedTrajectories():null);
			if (!strategy.equals(LocatorUtils.property(thisLocator, "rankedTrajectories", lhsRankedTrajectories), LocatorUtils.property(thatLocator, "rankedTrajectories", rhsRankedTrajectories), lhsRankedTrajectories, rhsRankedTrajectories)) {
				return false;
			}
		}
		{
			List<SpecialHandlingReasonCodeType> lhsSpecialHandling;
			lhsSpecialHandling = (((this.specialHandling!= null)&&(!this.specialHandling.isEmpty()))?this.getSpecialHandling():null);
			List<SpecialHandlingReasonCodeType> rhsSpecialHandling;
			rhsSpecialHandling = (((that.specialHandling!= null)&&(!that.specialHandling.isEmpty()))?that.getSpecialHandling():null);
			if (!strategy.equals(LocatorUtils.property(thisLocator, "specialHandling", lhsSpecialHandling), LocatorUtils.property(thatLocator, "specialHandling", rhsSpecialHandling), lhsSpecialHandling, rhsSpecialHandling)) {
				return false;
			}
		}
		{
			SupplementaryDataType lhsSupplementaryData;
			lhsSupplementaryData = this.getSupplementaryData();
			SupplementaryDataType rhsSupplementaryData;
			rhsSupplementaryData = that.getSupplementaryData();
			if (!strategy.equals(LocatorUtils.property(thisLocator, "supplementaryData", lhsSupplementaryData), LocatorUtils.property(thatLocator, "supplementaryData", rhsSupplementaryData), lhsSupplementaryData, rhsSupplementaryData)) {
				return false;
			}
		}
		{
			TypeOfFlightType lhsFlightType;
			lhsFlightType = this.getFlightType();
			TypeOfFlightType rhsFlightType;
			rhsFlightType = that.getFlightType();
			if (!strategy.equals(LocatorUtils.property(thisLocator, "flightType", lhsFlightType), LocatorUtils.property(thatLocator, "flightType", rhsFlightType), lhsFlightType, rhsFlightType)) {
				return false;
			}
		}
		{
			String lhsRemarks;
			lhsRemarks = this.getRemarks();
			String rhsRemarks;
			rhsRemarks = that.getRemarks();
			if (!strategy.equals(LocatorUtils.property(thisLocator, "remarks", lhsRemarks), LocatorUtils.property(thatLocator, "remarks", rhsRemarks), lhsRemarks, rhsRemarks)) {
				return false;
			}
		}
		return true;
	}

	public boolean equals(Object object) {
		final EqualsStrategy strategy = JAXBEqualsStrategy.INSTANCE;
		return equals(null, null, object, strategy);
	}

	public int hashCode(ObjectLocator locator, HashCodeStrategy strategy) {
		int currentHashCode = super.hashCode(locator, strategy);
		{
			RouteTrajectoryType theAgreed;
			theAgreed = this.getAgreed();
			currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "agreed", theAgreed), currentHashCode, theAgreed);
		}
		{
			AircraftType theAircraft;
			theAircraft = this.getAircraft();
			currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "aircraft", theAircraft), currentHashCode, theAircraft);
		}
		{
			ArrivalType theArrival;
			theArrival = this.getArrival();
			currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "arrival", theArrival), currentHashCode, theArrival);
		}
		{
			RouteTrajectoryType theCurrent;
			theCurrent = this.getCurrent();
			currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "current", theCurrent), currentHashCode, theCurrent);
		}
		{
			Set<DangerousGoodsType> theDangerousGoods;
			theDangerousGoods = (((this.dangerousGoods!= null)&&(!this.dangerousGoods.isEmpty()))?this.getDangerousGoods():null);
			currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "dangerousGoods", theDangerousGoods), currentHashCode, theDangerousGoods);
		}
		{
			DepartureType theDeparture;
			theDeparture = this.getDeparture();
			currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "departure", theDeparture), currentHashCode, theDeparture);
		}
		{
			RankedTrajectoryType theDesired;
			theDesired = this.getDesired();
			currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "desired", theDesired), currentHashCode, theDesired);
		}
		{
			DestinationType theDestination;
			theDestination = this.getDestination();
			currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "destination", theDestination), currentHashCode, theDestination);
		}
		{
			FlightEmergencyType theEmergency;
			theEmergency = this.getEmergency();
			currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "emergency", theEmergency), currentHashCode, theEmergency);
		}
		{
			EnRouteType theEnRoute;
			theEnRoute = this.getEnRoute();
			currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "enRoute", theEnRoute), currentHashCode, theEnRoute);
		}
		{
			Set<ExtensionType> theExtensions;
			theExtensions = (((this.extensions!= null)&&(!this.extensions.isEmpty()))?this.getExtensions():null);
			currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "extensions", theExtensions), currentHashCode, theExtensions);
		}
		{
			RouteTrajectoryType theFiled;
			theFiled = this.getFiled();
			currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "filed", theFiled), currentHashCode, theFiled);
		}
		{
			FlightIdentificationType theFlightIdentification;
			theFlightIdentification = this.getFlightIdentification();
			currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "flightIdentification", theFlightIdentification), currentHashCode, theFlightIdentification);
		}
		{
			PersonOrOrganizationType theFlightPlanOriginator;
			theFlightPlanOriginator = this.getFlightPlanOriginator();
			currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "flightPlanOriginator", theFlightPlanOriginator), currentHashCode, theFlightPlanOriginator);
		}
		{
			PersonOrOrganizationType theFlightPlanSubmitter;
			theFlightPlanSubmitter = this.getFlightPlanSubmitter();
			currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "flightPlanSubmitter", theFlightPlanSubmitter), currentHashCode, theFlightPlanSubmitter);
		}
		{
			GloballyUniqueFlightIdentifierType theGufi;
			theGufi = this.getGufi();
			currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "gufi", theGufi), currentHashCode, theGufi);
		}
		{
			PersonOrOrganizationType theGufiOriginator;
			theGufiOriginator = this.getGufiOriginator();
			currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "gufiOriginator", theGufiOriginator), currentHashCode, theGufiOriginator);
		}
		{
			RouteTrajectoryType theNegotiating;
			theNegotiating = this.getNegotiating();
			currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "negotiating", theNegotiating), currentHashCode, theNegotiating);
		}
		{
			AircraftOperatorType theOperator;
			theOperator = this.getOperator();
			currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "operator", theOperator), currentHashCode, theOperator);
		}
		{
			RadioCommunicationFailureType theRadioCommunicationFailure;
			theRadioCommunicationFailure = this.getRadioCommunicationFailure();
			currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "radioCommunicationFailure", theRadioCommunicationFailure), currentHashCode, theRadioCommunicationFailure);
		}
		{
			Set<RankedTrajectoryType> theRankedTrajectories;
			theRankedTrajectories = (((this.rankedTrajectories!= null)&&(!this.rankedTrajectories.isEmpty()))?this.getRankedTrajectories():null);
			currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "rankedTrajectories", theRankedTrajectories), currentHashCode, theRankedTrajectories);
		}
		{
			List<SpecialHandlingReasonCodeType> theSpecialHandling;
			theSpecialHandling = (((this.specialHandling!= null)&&(!this.specialHandling.isEmpty()))?this.getSpecialHandling():null);
			currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "specialHandling", theSpecialHandling), currentHashCode, theSpecialHandling);
		}
		{
			SupplementaryDataType theSupplementaryData;
			theSupplementaryData = this.getSupplementaryData();
			currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "supplementaryData", theSupplementaryData), currentHashCode, theSupplementaryData);
		}
		{
			TypeOfFlightType theFlightType;
			theFlightType = this.getFlightType();
			currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "flightType", theFlightType), currentHashCode, theFlightType);
		}
		{
			String theRemarks;
			theRemarks = this.getRemarks();
			currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "remarks", theRemarks), currentHashCode, theRemarks);
		}
		return currentHashCode;
	}

	public int hashCode() {
		final HashCodeStrategy strategy = JAXBHashCodeStrategy.INSTANCE;
		return this.hashCode(null, strategy);
	}

}
