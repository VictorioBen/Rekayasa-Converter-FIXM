//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.4 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2019.10.28 at 02:58:02 PM ICT 
//


package dev.ale.fdx.entity.messaging;

import javax.persistence.CascadeType;
import javax.persistence.Entity;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.Table;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlType;

import org.jvnet.jaxb2_commons.lang.Equals;
import org.jvnet.jaxb2_commons.lang.EqualsStrategy;
import org.jvnet.jaxb2_commons.lang.HashCode;
import org.jvnet.jaxb2_commons.lang.HashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBEqualsStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBHashCodeStrategy;
import org.jvnet.jaxb2_commons.locator.ObjectLocator;
import org.jvnet.jaxb2_commons.locator.util.LocatorUtils;

import dev.ale.fdx.entity.flight.FlightType;


/**
 * 
 *             A communication sent from one location to another and comprising an integral number 
 *             of fields. [ICAO Doc 9426]. The Message element is an entry point to the FIXM model. 
 *             
 *             
 * <pre>
 * &lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;deprecated xmlns="http://www.w3.org/2001/XMLSchema" xmlns:fb="http://www.fixm.aero/base/4.1" xmlns:fx="http://www.fixm.aero/flight/4.1" xmlns:mesg="http://www.fixm.aero/messaging/4.1" xmlns:xs="http://www.w3.org/2001/XMLSchema"&gt;&lt;deletionVersion&gt;Not specified yet.&lt;/deletionVersion&gt;&lt;deprecationVersion&gt;4.1.0&lt;/deprecationVersion&gt;&lt;rationale&gt;CR 28&lt;/rationale&gt;&lt;/deprecated&gt;
 * </pre>
 * 
 * 
 * <p>Java class for MessageType complex type.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType name="MessageType">
 *   &lt;complexContent>
 *     &lt;extension base="{http://www.fixm.aero/messaging/4.1}AbstractMessageType">
 *       &lt;sequence>
 *         &lt;element name="flight" type="{http://www.fixm.aero/flight/4.1}FlightType" minOccurs="0"/>
 *         &lt;element name="flightPlanNegotiationStatus" type="{http://www.fixm.aero/messaging/4.1}FlightPlanNegotiationStatusType" minOccurs="0"/>
 *         &lt;element name="flightPlanVersion" type="{http://www.fixm.aero/messaging/4.1}FlightPlanVersionType" minOccurs="0"/>
 *         &lt;element name="referenceMessage" type="{http://www.fixm.aero/messaging/4.1}FIXMUniqueMessageIdentifierType" minOccurs="0"/>
 *         &lt;element name="submissionStatus" type="{http://www.fixm.aero/messaging/4.1}SubmissionStatusType" minOccurs="0"/>
 *       &lt;/sequence>
 *     &lt;/extension>
 *   &lt;/complexContent>
 * &lt;/complexType>
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "MessageType", propOrder = {
    "flight",
    "flightPlanNegotiationStatus",
    "flightPlanVersion",
    "referenceMessage",
    "submissionStatus"
})
@Entity(name = "MessageType")
@Table(name = "MESSAGETYPE")
public class MessageType
    extends AbstractMessageType
    implements Equals, HashCode
{

    protected FlightType flight;
    protected FlightPlanNegotiationStatusType flightPlanNegotiationStatus;
    protected FlightPlanVersionType flightPlanVersion;
    protected FIXMUniqueMessageIdentifierType referenceMessage;
    protected SubmissionStatusType submissionStatus;

    /**
     * Gets the value of the flight property.
     * 
     * @return
     *     possible object is
     *     {@link FlightType }
     *     
     */
    @ManyToOne(targetEntity = FlightType.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "FLIGHT_MESSAGETYPE_HJID")
    public FlightType getFlight() {
        return flight;
    }

    /**
     * Sets the value of the flight property.
     * 
     * @param value
     *     allowed object is
     *     {@link FlightType }
     *     
     */
    public void setFlight(FlightType value) {
        this.flight = value;
    }

    /**
     * Gets the value of the flightPlanNegotiationStatus property.
     * 
     * @return
     *     possible object is
     *     {@link FlightPlanNegotiationStatusType }
     *     
     */
    @ManyToOne(targetEntity = FlightPlanNegotiationStatusType.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "FLIGHTPLANNEGOTIATIONSTATUS__0")
    public FlightPlanNegotiationStatusType getFlightPlanNegotiationStatus() {
        return flightPlanNegotiationStatus;
    }

    /**
     * Sets the value of the flightPlanNegotiationStatus property.
     * 
     * @param value
     *     allowed object is
     *     {@link FlightPlanNegotiationStatusType }
     *     
     */
    public void setFlightPlanNegotiationStatus(FlightPlanNegotiationStatusType value) {
        this.flightPlanNegotiationStatus = value;
    }

    /**
     * Gets the value of the flightPlanVersion property.
     * 
     * @return
     *     possible object is
     *     {@link FlightPlanVersionType }
     *     
     */
    @ManyToOne(targetEntity = FlightPlanVersionType.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "FLIGHTPLANVERSION_MESSAGETYP_0")
    public FlightPlanVersionType getFlightPlanVersion() {
        return flightPlanVersion;
    }

    /**
     * Sets the value of the flightPlanVersion property.
     * 
     * @param value
     *     allowed object is
     *     {@link FlightPlanVersionType }
     *     
     */
    public void setFlightPlanVersion(FlightPlanVersionType value) {
        this.flightPlanVersion = value;
    }

    /**
     * Gets the value of the referenceMessage property.
     * 
     * @return
     *     possible object is
     *     {@link FIXMUniqueMessageIdentifierType }
     *     
     */
    @ManyToOne(targetEntity = FIXMUniqueMessageIdentifierType.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "REFERENCEMESSAGE_MESSAGETYPE_0")
    public FIXMUniqueMessageIdentifierType getReferenceMessage() {
        return referenceMessage;
    }

    /**
     * Sets the value of the referenceMessage property.
     * 
     * @param value
     *     allowed object is
     *     {@link FIXMUniqueMessageIdentifierType }
     *     
     */
    public void setReferenceMessage(FIXMUniqueMessageIdentifierType value) {
        this.referenceMessage = value;
    }

    /**
     * Gets the value of the submissionStatus property.
     * 
     * @return
     *     possible object is
     *     {@link SubmissionStatusType }
     *     
     */
    @ManyToOne(targetEntity = SubmissionStatusType.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "SUBMISSIONSTATUS_MESSAGETYPE_0")
    public SubmissionStatusType getSubmissionStatus() {
        return submissionStatus;
    }

    /**
     * Sets the value of the submissionStatus property.
     * 
     * @param value
     *     allowed object is
     *     {@link SubmissionStatusType }
     *     
     */
    public void setSubmissionStatus(SubmissionStatusType value) {
        this.submissionStatus = value;
    }

    public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy strategy) {
        if (!(object instanceof MessageType)) {
            return false;
        }
        if (this == object) {
            return true;
        }
        if (!super.equals(thisLocator, thatLocator, object, strategy)) {
            return false;
        }
        final MessageType that = ((MessageType) object);
        {
            FlightType lhsFlight;
            lhsFlight = this.getFlight();
            FlightType rhsFlight;
            rhsFlight = that.getFlight();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "flight", lhsFlight), LocatorUtils.property(thatLocator, "flight", rhsFlight), lhsFlight, rhsFlight)) {
                return false;
            }
        }
        {
            FlightPlanNegotiationStatusType lhsFlightPlanNegotiationStatus;
            lhsFlightPlanNegotiationStatus = this.getFlightPlanNegotiationStatus();
            FlightPlanNegotiationStatusType rhsFlightPlanNegotiationStatus;
            rhsFlightPlanNegotiationStatus = that.getFlightPlanNegotiationStatus();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "flightPlanNegotiationStatus", lhsFlightPlanNegotiationStatus), LocatorUtils.property(thatLocator, "flightPlanNegotiationStatus", rhsFlightPlanNegotiationStatus), lhsFlightPlanNegotiationStatus, rhsFlightPlanNegotiationStatus)) {
                return false;
            }
        }
        {
            FlightPlanVersionType lhsFlightPlanVersion;
            lhsFlightPlanVersion = this.getFlightPlanVersion();
            FlightPlanVersionType rhsFlightPlanVersion;
            rhsFlightPlanVersion = that.getFlightPlanVersion();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "flightPlanVersion", lhsFlightPlanVersion), LocatorUtils.property(thatLocator, "flightPlanVersion", rhsFlightPlanVersion), lhsFlightPlanVersion, rhsFlightPlanVersion)) {
                return false;
            }
        }
        {
            FIXMUniqueMessageIdentifierType lhsReferenceMessage;
            lhsReferenceMessage = this.getReferenceMessage();
            FIXMUniqueMessageIdentifierType rhsReferenceMessage;
            rhsReferenceMessage = that.getReferenceMessage();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "referenceMessage", lhsReferenceMessage), LocatorUtils.property(thatLocator, "referenceMessage", rhsReferenceMessage), lhsReferenceMessage, rhsReferenceMessage)) {
                return false;
            }
        }
        {
            SubmissionStatusType lhsSubmissionStatus;
            lhsSubmissionStatus = this.getSubmissionStatus();
            SubmissionStatusType rhsSubmissionStatus;
            rhsSubmissionStatus = that.getSubmissionStatus();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "submissionStatus", lhsSubmissionStatus), LocatorUtils.property(thatLocator, "submissionStatus", rhsSubmissionStatus), lhsSubmissionStatus, rhsSubmissionStatus)) {
                return false;
            }
        }
        return true;
    }

    public boolean equals(Object object) {
        final EqualsStrategy strategy = JAXBEqualsStrategy.INSTANCE;
        return equals(null, null, object, strategy);
    }

    public int hashCode(ObjectLocator locator, HashCodeStrategy strategy) {
        int currentHashCode = super.hashCode(locator, strategy);
        {
            FlightType theFlight;
            theFlight = this.getFlight();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "flight", theFlight), currentHashCode, theFlight);
        }
        {
            FlightPlanNegotiationStatusType theFlightPlanNegotiationStatus;
            theFlightPlanNegotiationStatus = this.getFlightPlanNegotiationStatus();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "flightPlanNegotiationStatus", theFlightPlanNegotiationStatus), currentHashCode, theFlightPlanNegotiationStatus);
        }
        {
            FlightPlanVersionType theFlightPlanVersion;
            theFlightPlanVersion = this.getFlightPlanVersion();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "flightPlanVersion", theFlightPlanVersion), currentHashCode, theFlightPlanVersion);
        }
        {
            FIXMUniqueMessageIdentifierType theReferenceMessage;
            theReferenceMessage = this.getReferenceMessage();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "referenceMessage", theReferenceMessage), currentHashCode, theReferenceMessage);
        }
        {
            SubmissionStatusType theSubmissionStatus;
            theSubmissionStatus = this.getSubmissionStatus();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "submissionStatus", theSubmissionStatus), currentHashCode, theSubmissionStatus);
        }
        return currentHashCode;
    }

    public int hashCode() {
        final HashCodeStrategy strategy = JAXBHashCodeStrategy.INSTANCE;
        return this.hashCode(null, strategy);
    }

}
