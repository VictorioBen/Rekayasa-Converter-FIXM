//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.4 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2019.10.28 at 02:58:02 PM ICT 
//


package dev.ale.fdx.entity.flight;

import javax.persistence.CascadeType;
import javax.persistence.Entity;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.Table;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlType;

import org.jvnet.jaxb2_commons.lang.Equals;
import org.jvnet.jaxb2_commons.lang.EqualsStrategy;
import org.jvnet.jaxb2_commons.lang.HashCode;
import org.jvnet.jaxb2_commons.lang.HashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBEqualsStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBHashCodeStrategy;
import org.jvnet.jaxb2_commons.locator.ObjectLocator;
import org.jvnet.jaxb2_commons.locator.util.LocatorUtils;

import dev.ale.fdx.entity.base.ExtensibleType;
import dev.ale.fdx.entity.base.IndicatedAirspeedType;


/**
 * 
 *             Defines the speed schedule for climb and descent of the aircraft through the crossover 
 *             altitude. 
 *          
 * 
 * <p>Java class for SpeedScheduleType complex type.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType name="SpeedScheduleType">
 *   &lt;complexContent>
 *     &lt;extension base="{http://www.fixm.aero/base/4.1}ExtensibleType">
 *       &lt;sequence>
 *         &lt;element name="initialSpeed" type="{http://www.fixm.aero/base/4.1}IndicatedAirspeedType" minOccurs="0"/>
 *         &lt;element name="subsequentSpeed" type="{http://www.fixm.aero/base/4.1}IndicatedAirspeedType" minOccurs="0"/>
 *       &lt;/sequence>
 *     &lt;/extension>
 *   &lt;/complexContent>
 * &lt;/complexType>
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "SpeedScheduleType", propOrder = {
    "initialSpeed",
    "subsequentSpeed"
})
@Entity(name = "SpeedScheduleType")
@Table(name = "SPEEDSCHEDULETYPE")
public class SpeedScheduleType
    extends ExtensibleType
    implements Equals, HashCode
{

    protected IndicatedAirspeedType initialSpeed;
    protected IndicatedAirspeedType subsequentSpeed;

    /**
     * Gets the value of the initialSpeed property.
     * 
     * @return
     *     possible object is
     *     {@link IndicatedAirspeedType }
     *     
     */
    @ManyToOne(targetEntity = IndicatedAirspeedType.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "INITIALSPEED_SPEEDSCHEDULETY_0")
    public IndicatedAirspeedType getInitialSpeed() {
        return initialSpeed;
    }

    /**
     * Sets the value of the initialSpeed property.
     * 
     * @param value
     *     allowed object is
     *     {@link IndicatedAirspeedType }
     *     
     */
    public void setInitialSpeed(IndicatedAirspeedType value) {
        this.initialSpeed = value;
    }

    /**
     * Gets the value of the subsequentSpeed property.
     * 
     * @return
     *     possible object is
     *     {@link IndicatedAirspeedType }
     *     
     */
    @ManyToOne(targetEntity = IndicatedAirspeedType.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "SUBSEQUENTSPEED_SPEEDSCHEDUL_0")
    public IndicatedAirspeedType getSubsequentSpeed() {
        return subsequentSpeed;
    }

    /**
     * Sets the value of the subsequentSpeed property.
     * 
     * @param value
     *     allowed object is
     *     {@link IndicatedAirspeedType }
     *     
     */
    public void setSubsequentSpeed(IndicatedAirspeedType value) {
        this.subsequentSpeed = value;
    }

    public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy strategy) {
        if (!(object instanceof SpeedScheduleType)) {
            return false;
        }
        if (this == object) {
            return true;
        }
        if (!super.equals(thisLocator, thatLocator, object, strategy)) {
            return false;
        }
        final SpeedScheduleType that = ((SpeedScheduleType) object);
        {
            IndicatedAirspeedType lhsInitialSpeed;
            lhsInitialSpeed = this.getInitialSpeed();
            IndicatedAirspeedType rhsInitialSpeed;
            rhsInitialSpeed = that.getInitialSpeed();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "initialSpeed", lhsInitialSpeed), LocatorUtils.property(thatLocator, "initialSpeed", rhsInitialSpeed), lhsInitialSpeed, rhsInitialSpeed)) {
                return false;
            }
        }
        {
            IndicatedAirspeedType lhsSubsequentSpeed;
            lhsSubsequentSpeed = this.getSubsequentSpeed();
            IndicatedAirspeedType rhsSubsequentSpeed;
            rhsSubsequentSpeed = that.getSubsequentSpeed();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "subsequentSpeed", lhsSubsequentSpeed), LocatorUtils.property(thatLocator, "subsequentSpeed", rhsSubsequentSpeed), lhsSubsequentSpeed, rhsSubsequentSpeed)) {
                return false;
            }
        }
        return true;
    }

    public boolean equals(Object object) {
        final EqualsStrategy strategy = JAXBEqualsStrategy.INSTANCE;
        return equals(null, null, object, strategy);
    }

    public int hashCode(ObjectLocator locator, HashCodeStrategy strategy) {
        int currentHashCode = super.hashCode(locator, strategy);
        {
            IndicatedAirspeedType theInitialSpeed;
            theInitialSpeed = this.getInitialSpeed();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "initialSpeed", theInitialSpeed), currentHashCode, theInitialSpeed);
        }
        {
            IndicatedAirspeedType theSubsequentSpeed;
            theSubsequentSpeed = this.getSubsequentSpeed();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "subsequentSpeed", theSubsequentSpeed), currentHashCode, theSubsequentSpeed);
        }
        return currentHashCode;
    }

    public int hashCode() {
        final HashCodeStrategy strategy = JAXBHashCodeStrategy.INSTANCE;
        return this.hashCode(null, strategy);
    }

}
